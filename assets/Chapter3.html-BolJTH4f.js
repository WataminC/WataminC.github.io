import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as e,a as n,e as s,f as a}from"./app-Bj-dD81g.js";const o={},c=n("h1",{id:"第三章-栈和队列",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#第三章-栈和队列"},[n("span",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",{mathvariant:"normal"},"§")]),n("annotation",{encoding:"application/x-tex"},"\\S")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord"},"§")])])]),s(" 第三章 栈和队列")])])],-1),l=n("h3",{id:"栈-stack-逻辑结构",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#栈-stack-逻辑结构"},[n("span",null,[s("栈(Stack)"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",null,"−")]),n("annotation",{encoding:"application/x-tex"},"-")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},"−")])])]),s("逻辑结构")])])],-1),i=a(`<p><strong>定义</strong>:</p><p>只允许在一端插入和删除的线性表,后进先出(LIFO)</p><p><strong>栈的抽象定义</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">Stack</span> <span class="token punctuation">{</span>
<span class="token comment">//栈的类定义</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//构造函数</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Push</span><span class="token punctuation">(</span>T x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//进栈</span>
    <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">Pop</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//出栈</span>
    <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">getTop</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//取栈顶</span>
    <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//判栈空</span>
    <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">IsFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//判栈满</span>
<span class="token punctuation">}</span>；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>顺序栈</strong>:指的就是利用一组地址连续的存储单元依次存放自栈底到栈顶的数据元素。</p><p><strong>顺序栈类的定义</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">SeqStack</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span> <span class="token comment">//顺序栈类定义</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    T <span class="token operator">*</span>elements<span class="token punctuation">;</span>    <span class="token comment">//栈元素存放数组</span>
    <span class="token keyword">int</span> top<span class="token punctuation">;</span>    <span class="token comment">//栈顶指针</span>
    <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span>    <span class="token comment">//栈最大容量</span>
    <span class="token keyword">void</span> <span class="token function">overflowProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//栈的溢出处理</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">SeqStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> sz <span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//构造函数</span>
    ～<span class="token function">SeqStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//析构函数</span>
    <span class="token keyword">void</span> <span class="token function">Push</span><span class="token punctuation">(</span>T x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//进栈</span>
    <span class="token keyword">bool</span> <span class="token function">Pop</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//出栈</span>
    <span class="token keyword">bool</span> <span class="token function">getTop</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//取栈顶内容</span>
    <span class="token keyword">bool</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">bool</span> <span class="token function">IsFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> top <span class="token operator">==</span> maxSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>构造函数与析构函数</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token class-name">SeqStack</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">SeqStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> sz<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">maxSize</span><span class="token punctuation">(</span>sz<span class="token punctuation">)</span>
<span class="token punctuation">{</span> 
    top<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    elements<span class="token operator">=</span><span class="token keyword">new</span> T<span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>elements<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//判断是否分配成功</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
SeqStack<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">SeqStack</span><span class="token punctuation">(</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span> <span class="token keyword">delete</span><span class="token punctuation">[</span> <span class="token punctuation">]</span> elements<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>顺序栈溢出操作</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token class-name">SeqStack</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">overflowProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//私有函数：当栈满则执行扩充栈存储空间处理</span>
    T <span class="token operator">*</span>newArray <span class="token operator">=</span> <span class="token keyword">new</span> T<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//创建更大的存储数组</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> top<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        newArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    maxSize <span class="token operator">+=</span> maxSize<span class="token punctuation">;</span>
    <span class="token keyword">delete</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>elements<span class="token punctuation">;</span>
    elements <span class="token operator">=</span> newArray<span class="token punctuation">;</span> <span class="token comment">//改变elements指针</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>顺序栈进栈操作</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token class-name">SeqStack</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">Push</span><span class="token punctuation">(</span>T x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//若栈不满, 则将元素x插入该栈栈顶, 否则溢出处理</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token function">overflowProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//栈满</span>
    elements<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token comment">//栈顶指针先加1, 再进栈</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>顺序栈出栈操作</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">bool</span> <span class="token class-name">SeqStack</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">Pop</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//函数退出栈顶元素并返回栈顶元素的值</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    x <span class="token operator">=</span> elements<span class="token punctuation">[</span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//栈顶指针退1</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">//退栈成功</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>顺序栈取栈顶操作</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">bool</span> <span class="token class-name">Seqstack</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">getTop</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//若栈不空则函数返回该栈栈顶元素的地址</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> 
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    x <span class="token operator">=</span> elements<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>链式栈</strong>:用链表实现的栈</p><p><strong>链式栈类的定义</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">StackNode</span> <span class="token punctuation">{</span>
    <span class="token comment">//栈结点类定义</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    T data<span class="token punctuation">;</span> <span class="token comment">//栈结点数据</span>
    StackNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>link<span class="token punctuation">;</span> <span class="token comment">//结点链指针</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">StackNode</span><span class="token punctuation">(</span>T d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> StackNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token function">data</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">link</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">LinkedStack</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span> 
<span class="token comment">//链式栈类定义</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    StackNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>top<span class="token punctuation">;</span>  <span class="token comment">//栈顶指针</span>
    <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">,</span>
    StackNode <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//递归输出栈的所有元素</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">LinkedStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">//构造函数</span>
    ～<span class="token function">LinkedStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">makeEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">//析构函数</span>
    <span class="token keyword">void</span> <span class="token function">Push</span><span class="token punctuation">(</span>T x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//进栈</span>
    <span class="token keyword">bool</span> <span class="token function">Pop</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//退栈</span>
    <span class="token keyword">bool</span> <span class="token function">getTop</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>   <span class="token comment">//取栈顶</span>
    <span class="token keyword">bool</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> top <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">makeEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//清空栈的内容</span>
    <span class="token keyword">friend</span> ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">,</span>
    LinkedStack<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">output</span><span class="token punctuation">(</span>os<span class="token punctuation">,</span> s<span class="token punctuation">.</span>top<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token comment">//输出栈元素的重载操作 &lt;&lt;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>清空操作</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token class-name">LinkedStack</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">makeEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//逐次删去链式栈中的元素直至栈顶指针为空。</span>
    StackNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>top <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token comment">//逐个结点释放</span>
    <span class="token punctuation">{</span> 
        p <span class="token operator">=</span> top<span class="token punctuation">;</span> top <span class="token operator">=</span> top<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span> <span class="token keyword">delete</span> p<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>进栈操作</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token class-name">LinkedStack</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">Push</span><span class="token punctuation">(</span>T x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//将元素值x插入到链式栈的栈顶,即链头。</span>
    top <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token generic-function"><span class="token function">StackNode</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建新结点</span>
    <span class="token function">assert</span> <span class="token punctuation">(</span>top <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//创建失败退出</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>出栈操作</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">bool</span> <span class="token class-name">LinkedStack</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">Pop</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//删除栈顶结点, 返回被删栈顶元素的值。</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> 
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//栈空返回</span>
    StackNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>p <span class="token operator">=</span> top<span class="token punctuation">;</span>  <span class="token comment">//暂存栈顶元素</span>
    top <span class="token operator">=</span> top<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>    <span class="token comment">//退栈顶指针</span>
    x <span class="token operator">=</span> p<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
    <span class="token keyword">delete</span> p<span class="token punctuation">;</span>  <span class="token comment">//释放结点</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>取栈顶元素</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">bool</span> <span class="token class-name">LinkedStack</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">getTop</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> 
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//栈空返回</span>
    x <span class="token operator">=</span> top<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
    <span class="token comment">//返回栈顶元素的值</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>双栈共享同一空间</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">bool</span> <span class="token function">push</span><span class="token punctuation">(</span>DualStack<span class="token operator">&amp;</span> DS<span class="token punctuation">,</span> Type x<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span>
<span class="token punctuation">{</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span>DS<span class="token punctuation">.</span>top0<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">==</span> DS<span class="token punctuation">.</span>top1<span class="token punctuation">)</span> 
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        DS<span class="token punctuation">.</span>top0<span class="token operator">++</span><span class="token punctuation">;</span> 
        DS<span class="token punctuation">.</span>V<span class="token punctuation">[</span>DStop0<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span> 
        DS<span class="token punctuation">.</span>top1<span class="token operator">--</span><span class="token punctuation">;</span> 
        DS<span class="token punctuation">.</span>V<span class="token punctuation">[</span>DS<span class="token punctuation">.</span>top1<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">Pop</span><span class="token punctuation">(</span>DualStack<span class="token operator">&amp;</span> DS<span class="token punctuation">,</span> Type<span class="token operator">&amp;</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span>
<span class="token punctuation">{</span> 
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>DS<span class="token punctuation">.</span>top0 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> 
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        x <span class="token operator">=</span> DS<span class="token punctuation">.</span>V<span class="token punctuation">[</span>DS<span class="token punctuation">.</span>top0<span class="token punctuation">]</span><span class="token punctuation">;</span> 
        DS<span class="token punctuation">.</span>top0<span class="token operator">--</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>DS<span class="token punctuation">.</span>top1 <span class="token operator">==</span> maxsize<span class="token punctuation">)</span>     
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        x <span class="token operator">=</span> DS<span class="token punctuation">.</span>V<span class="token punctuation">[</span>DS<span class="token punctuation">.</span>top1<span class="token punctuation">]</span><span class="token punctuation">;</span> 
        DS<span class="token punctuation">.</span>top1<span class="token operator">++</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">push</span><span class="token punctuation">(</span>DualStack<span class="token operator">&amp;</span> DS<span class="token punctuation">,</span> Type x<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>DS<span class="token punctuation">.</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">==</span> DS<span class="token punctuation">.</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> 
        DS<span class="token punctuation">.</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span> 
    <span class="token keyword">else</span> 
        DS<span class="token punctuation">.</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
    DS<span class="token punctuation">.</span>V<span class="token punctuation">[</span>DS<span class="token punctuation">.</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">Pop</span><span class="token punctuation">(</span>DualStack<span class="token operator">&amp;</span> DS<span class="token punctuation">,</span> Type<span class="token operator">&amp;</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>DS<span class="token punctuation">.</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> DS<span class="token punctuation">.</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>     
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    x <span class="token operator">=</span> DS<span class="token punctuation">.</span>V<span class="token punctuation">[</span>DS<span class="token punctuation">.</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> 
        DS<span class="token punctuation">.</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span> 
    <span class="token keyword">else</span> 
        DS<span class="token punctuation">.</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>十进制转n进制</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">conversion</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    seqstack s<span class="token punctuation">;</span>
    cin<span class="token operator">&gt;&gt;</span>num<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
    <span class="token punctuation">{</span> 
        s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token operator">%</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        num<span class="token operator">=</span>num<span class="token operator">/</span>n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span> S<span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span> 
        s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout<span class="token operator">&lt;&lt;</span>e<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>括号匹配问题</strong></li><li><strong>表达式计算</strong></li></ul><hr>`,36),u=n("h1",{id:"队列-queue-逻辑结构",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#队列-queue-逻辑结构"},[n("span",null,[s("队列(Queue)"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",null,"−")]),n("annotation",{encoding:"application/x-tex"},"-")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},"−")])])]),s("逻辑结构")])])],-1),k=a(`<p><strong>定义</strong></p><ul><li>队列是只允许在一端删除，在另一端插入的线性表</li><li>队头( front ):允许删除的一端</li><li>队尾( rear ):允许插入的一端</li><li></li></ul><p><strong>特性</strong></p><ul><li>先进先出( FIFO , First In First Out )</li></ul><p><strong>队列的抽象数据类型</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">//构造函数</span>
    ～<span class="token function">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">//析构函数</span>
    <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">EnQueue</span><span class="token punctuation">(</span>T x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//进队列</span>
    <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">DeQueue</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment">//出队列</span>
    <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">getFront</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//取队首元素</span>
    <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">IsFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>顺序队列</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">SeqQueue</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Queue</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span> <span class="token comment">//队列类定义</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
    <span class="token keyword">int</span> rear<span class="token punctuation">,</span> front<span class="token punctuation">;</span>    <span class="token comment">//队尾与队头指针</span>
    T <span class="token operator">*</span>elements<span class="token punctuation">;</span>    <span class="token comment">//队列存放数组</span>
    <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span>    <span class="token comment">//队列最大容量</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">SeqQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//构造函数</span>
    ～<span class="token function">SeqQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">delete</span><span class="token punctuation">[</span> <span class="token punctuation">]</span> elements<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">//析构函数</span>
    <span class="token keyword">bool</span> <span class="token function">EnQueue</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//新元素进队列</span>
    <span class="token keyword">bool</span> <span class="token function">DeQueue</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//退出队头元素</span>
    <span class="token keyword">bool</span> <span class="token function">getFront</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//取队头元素值</span>
    <span class="token keyword">void</span> <span class="token function">makeEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> front <span class="token operator">=</span> rear <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">bool</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> front <span class="token operator">==</span> rear<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">bool</span> <span class="token function">IsFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
    <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>rear <span class="token operator">==</span> maxSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
    <span class="token punctuation">{</span> <span class="token keyword">return</span> rear<span class="token operator">-</span>front<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>入队列</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">bool</span> <span class="token class-name">SeqQueue</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token double-colon punctuation">::</span><span class="token function">EnQueue</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>x <span class="token punctuation">)</span> <span class="token comment">//新元素进队列</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> rear<span class="token operator">==</span> maxSize<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span> <span class="token comment">// 队列已满的处理</span>
    <span class="token punctuation">{</span> 
        cout<span class="token operator">&lt;&lt;</span>”overflow”<span class="token punctuation">;</span> 
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        rear<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 队尾位置指示器后移一个位置</span>
        elements<span class="token punctuation">[</span>rear<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span> <span class="token comment">// 填入新元素</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token comment">// EnQueue</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>出队列</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">bool</span> <span class="token class-name">SeqQueue</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span> <span class="token function">DeQueue</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//退出队头元素</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> front<span class="token operator">==</span>rear <span class="token punctuation">)</span> <span class="token comment">// 队列为空的处理</span>
    <span class="token punctuation">{</span>
        cout<span class="token operator">&lt;&lt;</span> “underflow”<span class="token punctuation">;</span> 
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 不成功信息</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        front<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//队头位置指示器后移一个位置</span>
        x<span class="token operator">=</span>elements<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 暂存队头元素</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 返回出列成功信息</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token comment">// DelQueue</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>顺序队列问题分析</strong></p><ul><li>“假溢出”的最坏情况:</li><li>rear=maxSize-1, front=maxSize-1(空列)</li><li>顺序队列的空间利用率非常低，浪费存储空间 。</li></ul><p><strong>解决方法</strong>:</p><ul><li>整体移动</li><li>循环队列</li></ul><hr><p><strong>循环队列</strong> (Circular Queue)</p><ul><li>队列存放数组被当作首尾相接的表处理。</li><li>队头、队尾指针加1时从maxSize-1直接进到0，可用语言的取模(余数)运算实现。</li><li>队头指针进1: front = (front+1) % maxSize;</li><li>队尾指针进1: rear = (rear+1) % maxSize;</li><li>队列初始化：front = rear = 0;</li><li>队空条件：front == rear;</li><li>队满条件：(rear+1) % maxSize == front</li></ul><p><strong>入队操作</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">bool</span> <span class="token class-name">SeqQueue</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">EnQueue</span> <span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span> x<span class="token punctuation">)</span>
<span class="token punctuation">{</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span> maxSize <span class="token operator">==</span> front<span class="token punctuation">)</span> 
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        rear<span class="token operator">=</span> <span class="token punctuation">(</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span> maxSize<span class="token punctuation">;</span>
        elements<span class="token punctuation">[</span>rear<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>出队操作</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
T <span class="token class-name">SeqQueue</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">DeQueue</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>x<span class="token punctuation">)</span>
<span class="token punctuation">{</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rear <span class="token operator">==</span> front<span class="token punctuation">)</span> 
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        front<span class="token operator">=</span> <span class="token punctuation">(</span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span> maxSize<span class="token punctuation">;</span>
        x<span class="token operator">=</span>elements<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>判满和计算元素个数</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">bool</span> <span class="token class-name">SeqQueue</span><span class="token double-colon punctuation">::</span><span class="token function">IsFull</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span> maxSize <span class="token operator">==</span> front<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token class-name">SeqQueue</span><span class="token double-colon punctuation">::</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>rear<span class="token operator">-</span>front<span class="token operator">+</span>maxSize<span class="token punctuation">)</span> <span class="token operator">%</span> maxSize<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>链式队列类的定义</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">QueueNode</span> <span class="token punctuation">{</span>
<span class="token comment">//队列结点类定义</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    T data<span class="token punctuation">;</span> <span class="token comment">//队列结点数据</span>
    QueueNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>link<span class="token punctuation">;</span> <span class="token comment">//结点链指针</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">QueueNode</span><span class="token punctuation">(</span>E d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> QueueNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">data</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">link</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">LinkedQueue</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    QueueNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>front<span class="token punctuation">,</span> <span class="token operator">*</span>rear<span class="token punctuation">;</span> <span class="token comment">//队头、队尾指针</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">LinkedQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">rear</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">front</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token operator">~</span><span class="token function">LinkedQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> <span class="token function">EnQueue</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    P118
    <span class="token keyword">bool</span> <span class="token function">DeQueue</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> <span class="token function">GetFront</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">MakeEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//实现与~Queue()同</span>
    <span class="token keyword">bool</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> front <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>入列操作</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">bool</span> <span class="token class-name">LinkedQueue</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">EnQueue</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>x<span class="token punctuation">)</span>
<span class="token punctuation">{</span> 
    <span class="token comment">//将新元素x插入到队列的队尾</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>front <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//创建第一个结点</span>
        front <span class="token operator">=</span> rear <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token generic-function"><span class="token function">QueueNode</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>front <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> <span class="token comment">//分配失败</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">//队列不空, 插入</span>
        rear<span class="token operator">-&gt;</span>link <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token generic-function"><span class="token function">QueueNode</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>rear<span class="token operator">-&gt;</span>link <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        rear <span class="token operator">=</span> rear<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>出列操作</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token comment">//如果队列不空，将队头结点从链式队列中删去</span>
<span class="token keyword">bool</span> <span class="token class-name">LinkedQueue</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">DeQueue</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> x<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> 
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">//判队空</span>
    QueueNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>p <span class="token operator">=</span> front<span class="token punctuation">;</span>
    x <span class="token operator">=</span> front<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span> 
    front <span class="token operator">=</span> front<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>
    <span class="token keyword">delete</span> p<span class="token punctuation">;</span> 
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>取首元素</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">E</span><span class="token operator">&gt;</span>
<span class="token keyword">bool</span> <span class="token class-name">LinkedQueue</span><span class="token operator">&lt;</span>E<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">GetFront</span><span class="token punctuation">(</span>E<span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//若队列不空，则函数返回队头元素的值</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    x <span class="token operator">=</span> front<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span> 
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>析构函数</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
LinkedQueue<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">LinkedQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//析构函数</span>
    QueueNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>front <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//逐个结点释放</span>
        p <span class="token operator">=</span> front<span class="token punctuation">;</span> 
        front <span class="token operator">=</span> front<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span> <span class="token keyword">delete</span> p<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,37),r=[c,l,i,u,k];function d(m,v){return t(),e("div",null,r)}const y=p(o,[["render",d],["__file","Chapter3.html.vue"]]),g=JSON.parse('{"path":"/MD/School/DataStructure/Chapter3.html","title":"第3章 栈与队列","lang":"zh-CN","frontmatter":{"title":"第3章 栈与队列","category":"CS","tag":"DataStructure","description":"§ 第三章 栈和队列 栈(Stack)−逻辑结构 定义: 只允许在一端插入和删除的线性表,后进先出(LIFO) 栈的抽象定义 顺序栈:指的就是利用一组地址连续的存储单元依次存放自栈底到栈顶的数据元素。 顺序栈类的定义 构造函数与析构函数 顺序栈溢出操作 顺序栈进栈操作 顺序栈出栈操作 顺序栈取栈顶操作 链式栈:用链表实现的栈 链式栈类的定义 清空操作 ...","head":[["meta",{"property":"og:url","content":"https://www.wataminc.top/MD/School/DataStructure/Chapter3.html"}],["meta",{"property":"og:site_name","content":"Watamin C"}],["meta",{"property":"og:title","content":"第3章 栈与队列"}],["meta",{"property":"og:description","content":"§ 第三章 栈和队列 栈(Stack)−逻辑结构 定义: 只允许在一端插入和删除的线性表,后进先出(LIFO) 栈的抽象定义 顺序栈:指的就是利用一组地址连续的存储单元依次存放自栈底到栈顶的数据元素。 顺序栈类的定义 构造函数与析构函数 顺序栈溢出操作 顺序栈进栈操作 顺序栈出栈操作 顺序栈取栈顶操作 链式栈:用链表实现的栈 链式栈类的定义 清空操作 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-18T09:24:14.000Z"}],["meta",{"property":"article:author","content":"Watamin C"}],["meta",{"property":"article:tag","content":"DataStructure"}],["meta",{"property":"article:modified_time","content":"2024-02-18T09:24:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第3章 栈与队列\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-18T09:24:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Watamin C\\",\\"url\\":\\"www.wataminc.top\\"}]}"]]},"headers":[{"level":3,"title":"栈(Stack)逻辑结构","slug":"栈-stack-逻辑结构","link":"#栈-stack-逻辑结构","children":[]}],"git":{"createdTime":1708177507000,"updatedTime":1708248254000,"contributors":[{"name":"WataminC","email":"1286982501@qq.com","commits":2}]},"readingTime":{"minutes":6.89,"words":2067},"filePathRelative":"MD/School/DataStructure/Chapter3.md","localizedDate":"2024年2月17日","excerpt":"\\n<h3>栈(Stack)<span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mo>−</mo></mrow><annotation encoding=\\"application/x-tex\\">-</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.6667em;vertical-align:-0.0833em;\\"></span><span class=\\"mord\\">−</span></span></span></span>逻辑结构</h3>","autoDesc":true}');export{y as comp,g as data};
