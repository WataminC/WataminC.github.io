import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as e,f as a,a as n,e as s}from"./app-QXdn0-65.js";const o={},c=a(`<p><strong>树的基本术语</strong></p><ul><li>1.根</li><li>2.孩子、双亲和兄弟 、祖先、子孙</li><li>3.分支结点和叶子结点</li><li>4.结点的度和树的度</li><li>5.结点的层数和树的深度</li><li>6.路径和路径长度</li><li>7.有序树和无序树</li><li>8.森林</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>树的操作（实际生活的抽象）
（1）求根操作 Root(x)
求出当前树中结点x的根结点；
（2）求双亲操作 Parent(x) 求出当前树中结点x的双亲结点；
（3）求孩子操作 Child(x，i) 求出当前树中结点x的第i个孩子结点；
（4）插入子树操作 Insert(x,i,s) 当前树中插入根结点为s的子树，并
作为结点x的第i棵子树；
（5）删除子树操作 Delete(x,i) 在当前树中删除结点x的第i棵子树；
（6）树的遍历操作 Travel( ) 按某种次序依次访问当前树中的各个
结点，并使每个结点只被访问一次；
（7）清除操作 Clear( ) 将当前树置为空树；
（8）求树高 Depth( ) 求出树的高度；
（9）树建立操作 Create( ) 建立一棵非空的树并成为当前树；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>树的抽象数据类型</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">Tree</span> <span class="token punctuation">{</span>
<span class="token comment">//对象: 树是由n (≥0) 个结点组成的有限集合。在</span>
<span class="token comment">//类界面中的 position 是树中结点的地址。在顺序</span>
<span class="token comment">//存储方式下是下标型, 在链表存储方式下是指针</span>
<span class="token comment">//型。T 是树结点中存放数据的类型, 要求所有结</span>
<span class="token comment">//点的数据类型都是一致的。</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Tree</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">Tree</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">BuildRoot</span> <span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//建立树的根结点</span>
    position <span class="token function">FirstChild</span><span class="token punctuation">(</span>position p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//返回 p 第一个子女地址, 无子女返回 0</span>
    position <span class="token function">NextSibling</span><span class="token punctuation">(</span>position p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//返回 p 下一兄弟地址, 若无下一兄弟返回 0</span>
    position <span class="token function">Parent</span><span class="token punctuation">(</span>position p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//返回 p 双亲结点地址, 若 p 为根返回 0</span>
    T <span class="token function">getData</span><span class="token punctuation">(</span>position p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//返回结点 p 中存放的值</span>
    <span class="token keyword">bool</span> <span class="token function">InsertChild</span><span class="token punctuation">(</span>position p<span class="token punctuation">,</span> T<span class="token operator">&amp;</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//在结点 p 下插入值为 value 的新子女, 若插</span>
    <span class="token comment">//入失败, 函数返回false, 否则返回true</span>
    <span class="token keyword">bool</span> <span class="token function">DeleteChild</span> <span class="token punctuation">(</span>position p<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//删除结点 p 的第 i 个子女及其全部子孙结</span>
    <span class="token comment">//点, 若删除失败, 则返回false, 否则返回true</span>
    <span class="token keyword">void</span> <span class="token function">DeleteSubTree</span> <span class="token punctuation">(</span>position t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//删除以 t 为根结点的子树</span>
    <span class="token keyword">bool</span> <span class="token function">IsEmpty</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//判树空否, 若空则返回true, 否则返回false</span>
    <span class="token keyword">void</span> <span class="token function">Traversal</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>visit<span class="token punctuation">)</span><span class="token punctuation">(</span>position p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//遍历以 p 为根的子树</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>树的存储结构</strong></p><ul><li>链式结构 <ul><li>不定长的多重链式结构</li><li>定长的多重链式结构</li></ul></li><li>孩子链表示方法</li><li>双亲表示法</li></ul><p><strong>一般树转化为二叉树</strong></p><ul><li>加线：在个兄弟结点之间加一连线。</li><li>抹线：对每一结点，除了其最左的一个孩子以外， 抹掉该结点原先与其余孩子之间的连线。</li><li>旋转：以树根为轴心，将整棵树按顺时针旋转 45 0 。</li></ul><p><strong>二叉树还原为一般树</strong></p><ul><li>加线:若某结点是双亲结点的左孩子,则将 该结点的右孩子以及当且仅当连续地沿着此右 孩子的右子树方向不断地搜索到的所有右孩子, 都分别与该结点的双亲结点用连线连接起来</li><li>抹线:删去原二叉树中所有双亲结点与右 孩子的连线。</li><li>调整:把属于同一层的结点调整到同一水 平线上。</li></ul><p><strong>森林转换为二叉树</strong></p><ul><li>将森林中每棵树转换为二叉树。</li><li>将森林中每棵转换所得的二叉树的树根用线相连。即第一棵二叉树不动，从第二棵二叉树开始，依次把后一棵二叉树的根结点作为前一棵二叉树根结点的右孩子。</li></ul><p><strong>森林还原为二叉树</strong></p><ul><li>抹线：将二叉树的根结点与其右孩子i的连线以 及当且仅当连续地沿着结点i的右分支不断搜索到的 所有右孩子间的连线删去，这样就可以得到若干棵独 立的二叉树。</li><li>还原：分别将各棵独立的二叉树还原为树。</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>二叉树操作
（1）求根操作 Root(x)
求出当前二叉树中结点x的根结点；
（2）求双亲操作 Parent(x) 求出当前二叉树中结点x的双亲结点；
（3）求左孩子操作 leftchild(x) 求出当前二叉树中结点x的左孩子结点；
（4）求右孩子操作 rightchild(x) 求出当前二叉树中结点x的右孩子结点；
（5）插入左子树操作 Linsert(x,s) 当前二叉树中插入根结点为s的子树，并作为
无左子树的结点x的左子树；
（6）插入右子树操作 Rinsert(x,s) 当前二叉树中插入根结点为s的子树，并作为
无右子树的结点x的右子树；
（7）删除左子树操作 Ldelete(x) 在当前二叉树中删除结点x的左子树；
（8）删除右子树操作 Rdelete(x) 在当前二叉树中删除结点x的右子树；
（9）遍历操作 Travel( ) 按某种次序依次访问当前二叉树中的各个结点，并使
每个结点只被访问一次；
（10）清除操作 Clear( ) 将当前二叉树置为空二叉树；
（11）求树高 Depth( ) 求出二叉树的高度；
（12）建立二叉树操作 Create( ) 建立一棵非空的二叉树并成为当前二叉树；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二叉树的抽象数据类型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">BinaryTree</span> <span class="token punctuation">{</span>
<span class="token comment">//对象: 结点的有限集合, 二叉树是有序树</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">BinaryTree</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//构造函数</span>
    <span class="token function">BinaryTree</span> <span class="token punctuation">(</span>BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>lch<span class="token punctuation">,</span>BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>rch<span class="token punctuation">,</span> T item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//构造函数, 以item为根, lch和rch为左、右子</span>
    <span class="token comment">//树构造一棵二叉树</span>
    <span class="token keyword">int</span> <span class="token function">Height</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//求树深度或高度</span>
    <span class="token keyword">int</span> <span class="token function">Size</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//求树中结点个数</span>
    <span class="token keyword">bool</span> <span class="token function">IsEmpty</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判二叉树空否？</span>
    BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token function">Parent</span> <span class="token punctuation">(</span>BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//求结点 t 的双亲</span>
    BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token function">LeftChild</span> <span class="token punctuation">(</span>BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//求结点 t 的左子女</span>
    BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token function">RightChild</span> <span class="token punctuation">(</span>BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//求结点 t 的右子女</span>
    <span class="token keyword">bool</span> <span class="token function">Insert</span> <span class="token punctuation">(</span>T item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在树中插入新元素</span>
    <span class="token keyword">bool</span> <span class="token function">Remove</span> <span class="token punctuation">(</span>T item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在树中删除元素</span>
    <span class="token keyword">bool</span> <span class="token function">Find</span> <span class="token punctuation">(</span>T<span class="token operator">&amp;</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断item是否在树中</span>
    <span class="token keyword">bool</span> <span class="token function">getData</span> <span class="token punctuation">(</span>T<span class="token operator">&amp;</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取得结点数据BinTreeNode&lt;T&gt; *getRoot (); </span>
    <span class="token comment">//取根</span>
    <span class="token keyword">void</span> <span class="token function">Travel</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>visit<span class="token punctuation">)</span> <span class="token punctuation">(</span>BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历, visit是访问函数</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>二叉树类的定义</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>二叉树的类定义
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">BinTreeNode</span> <span class="token punctuation">{</span>
    <span class="token comment">//二叉树结点类定义</span>
    T data<span class="token punctuation">;</span> <span class="token comment">//数据域</span>
    BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>leftChild<span class="token punctuation">,</span> <span class="token operator">*</span>rightChild<span class="token punctuation">;</span> <span class="token comment">//左子女、右子女链域</span>
    <span class="token function">BinTreeNode</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//构造函数</span>
    <span class="token punctuation">{</span> leftChild <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> rightChild <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token function">BinTreeNode</span> <span class="token punctuation">(</span>T x<span class="token punctuation">,</span> BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>r <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>   
        data <span class="token operator">=</span> x<span class="token punctuation">;</span> 
        leftChild <span class="token operator">=</span> l<span class="token punctuation">;</span> 
        rightChild <span class="token operator">=</span> r<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">BinaryTree</span> <span class="token punctuation">{</span>  <span class="token comment">//二叉树类定义</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">BinaryTree</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">root</span> <span class="token punctuation">(</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token comment">//构造函数</span>
    <span class="token function">BinaryTree</span> <span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">RefValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">root</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token comment">//构造函数</span>
    <span class="token function">BinaryTree</span> <span class="token punctuation">(</span>BinaryTree<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//复制构造函数</span>
    ～<span class="token function">BinaryTree</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">destroy</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">//析构函数</span>
    <span class="token keyword">bool</span> <span class="token function">IsEmpty</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> root <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token punctuation">}</span>   <span class="token comment">//判二叉树空否</span>
    <span class="token keyword">int</span> <span class="token function">Height</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">Height</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">//求树高度</span>
    <span class="token keyword">int</span> <span class="token function">Size</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">Size</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment">//求结点数</span>
    BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token function">Parent</span><span class="token punctuation">(</span>BinTreeNode <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>t<span class="token punctuation">)</span>
    <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> root <span class="token operator">==</span> t<span class="token punctuation">)</span> <span class="token operator">?</span>
    <span class="token number">0</span> <span class="token operator">:</span> <span class="token function">Parent</span> <span class="token punctuation">(</span>root<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">//返回双亲结点</span>
    BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token function">LeftChild</span> <span class="token punctuation">(</span>BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>t<span class="token punctuation">)</span>
    <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span>？t<span class="token operator">-&gt;</span>leftChild <span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token comment">//返回左子女</span>
    BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token function">RightChild</span> <span class="token punctuation">(</span>BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>t<span class="token punctuation">)</span>
    <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span>？t<span class="token operator">-&gt;</span>rightChild <span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token comment">//返回右子女</span>
    BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token function">getRoot</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token comment">//取根</span>
    <span class="token keyword">int</span> <span class="token function">Insert</span> <span class="token punctuation">(</span><span class="token keyword">const</span> T item<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//插入新元素</span>
    BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token function">Find</span> <span class="token punctuation">(</span>T item<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token comment">//搜索</span>
    <span class="token keyword">void</span> <span class="token function">Travel</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>visit<span class="token punctuation">)</span> <span class="token punctuation">(</span>BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//遍历, visit是访问函数</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
    BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>root<span class="token punctuation">;</span>   <span class="token comment">//二叉树的根指针</span>
    T RefValue<span class="token punctuation">;</span> <span class="token comment">//数据输入停止标志</span>
    <span class="token keyword">void</span> <span class="token function">CreateBinTree</span> <span class="token punctuation">(</span>istream<span class="token operator">&amp;</span> in<span class="token punctuation">,</span>
    BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token operator">&amp;</span> subTree<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//从文件读入建树</span>
    <span class="token keyword">bool</span> <span class="token function">Insert</span> <span class="token punctuation">(</span>BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token operator">&amp;</span> subTree<span class="token punctuation">,</span> T<span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//插入</span>
    <span class="token keyword">void</span> <span class="token function">destroy</span> <span class="token punctuation">(</span>BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token operator">&amp;</span> subTree<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//删除</span>
    <span class="token keyword">bool</span> <span class="token function">Find</span> <span class="token punctuation">(</span>BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>subTree<span class="token punctuation">,</span> T<span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//查找BinTreeNode&lt;T&gt; *Copy (BinTreeNode&lt;T&gt; *r);</span>
    <span class="token comment">//复制</span>
    <span class="token keyword">int</span> <span class="token function">Height</span> <span class="token punctuation">(</span>BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>subTree<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//返回树高度</span>
    <span class="token keyword">int</span> <span class="token function">Size</span> <span class="token punctuation">(</span>BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>subTree<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回结点数</span>
    BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token function">Parent</span> <span class="token punctuation">(</span>BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>
    subTree<span class="token punctuation">,</span> BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回父结点</span>
    BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token function">Find</span> <span class="token punctuation">(</span>BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>
    subTree<span class="token punctuation">,</span> T<span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>   <span class="token comment">//搜寻xfriend istream&amp; operator &gt;&gt; (istream&amp; in,</span>
    <span class="token function">BinaryTree</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">&amp;</span> Tree<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//重载操作：输入</span>
    <span class="token keyword">friend</span> ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> out<span class="token punctuation">,</span> BinaryTree<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">&amp;</span> Tree<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//重载操作：输出</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>非递归遍历算法</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">BinaryTree</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>visit<span class="token punctuation">)</span><span class="token punctuation">(</span>BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//前序遍历的非递归算法</span>
<span class="token punctuation">{</span>
    stack<span class="token operator">&lt;</span>BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span><span class="token operator">&gt;</span> s<span class="token punctuation">;</span>  <span class="token comment">// 定义一个以二叉结点总数为容量的顺序栈对象</span>
    t<span class="token operator">=</span>root<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">||</span>t <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//栈或当前指针非空</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 当前指针非空</span>
        <span class="token punctuation">{</span>
            <span class="token function">visit</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> 
            s<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
            t<span class="token operator">=</span>t<span class="token operator">-&gt;</span>leftchild<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span> 
            s<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> 
            t<span class="token operator">=</span>t<span class="token operator">-&gt;</span>rightchild<span class="token punctuation">;</span> 
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token comment">// while</span>
<span class="token punctuation">}</span> <span class="token comment">// PreOrder</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>中序遍历</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token class-name">BinaryTree</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">inOrder</span><span class="token punctuation">(</span> BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>subTree， <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>visit<span class="token punctuation">)</span><span class="token punctuation">(</span>BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> subTree<span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token comment">// 二叉树非空</span>
    <span class="token punctuation">{</span>
        <span class="token function">inorder</span><span class="token punctuation">(</span>subTree<span class="token operator">-&gt;</span>leftchild<span class="token punctuation">,</span>visit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对左子树进行遍历</span>
        <span class="token function">visit</span><span class="token punctuation">(</span>subTree<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对根结点进行访问</span>
        <span class="token function">inorder</span><span class="token punctuation">(</span>subTree<span class="token operator">-&gt;</span>rightchild<span class="token punctuation">,</span>visit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对右子树进行遍历</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token comment">// InOrder</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>Template <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token class-name">BinaryTree</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">inOrder</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>visit<span class="token punctuation">)</span><span class="token punctuation">(</span>BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">)</span>
<span class="token comment">//中序遍历的非递归算法</span>
<span class="token punctuation">{</span>
    stack<span class="token operator">&lt;</span> BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> <span class="token operator">&gt;</span> s<span class="token punctuation">;</span>
    <span class="token comment">// 定义一个以二叉树的结点总数作为容量的顺序栈对象</span>
    t<span class="token operator">=</span>root<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token operator">!</span> s<span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">||</span>t<span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token comment">// 栈或当前指针非空</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span> t <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token comment">// 当前指针非空</span>
        <span class="token punctuation">{</span>
            s<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> 
            t<span class="token operator">=</span>t<span class="token operator">-&gt;</span>leftchild<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span> s<span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            s<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span> t <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">visit</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
            t<span class="token operator">=</span>t<span class="token operator">-&gt;</span>rightchild<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token comment">// while</span>
<span class="token punctuation">}</span> <span class="token comment">// InOrder</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>后序遍历</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>Template <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token class-name">BinaryTree</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">postOrder</span><span class="token punctuation">(</span> BinTreeNode <span class="token operator">*</span>subTree<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>visit<span class="token punctuation">)</span><span class="token punctuation">(</span>BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> subTree<span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token comment">// 二叉树非空</span>
    <span class="token punctuation">{</span>
        <span class="token function">postOrder</span><span class="token punctuation">(</span> subTree<span class="token operator">-&gt;</span>leftchild<span class="token punctuation">,</span>visit<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment">//对左子树进行遍历</span>
        <span class="token function">postOrder</span><span class="token punctuation">(</span> subTree<span class="token operator">-&gt;</span>rightchild<span class="token punctuation">,</span>visit <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对右子树进行遍历</span>
        <span class="token function">visit</span><span class="token punctuation">(</span>subTree<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对根结点进行访问</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token comment">// PostOrder</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">BinaryTree</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">PostOrder</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>visit<span class="token punctuation">)</span><span class="token punctuation">(</span>BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">)</span>
<span class="token comment">//后序遍历的非递归算法</span>
<span class="token punctuation">{</span>
    stack<span class="token operator">&lt;</span> BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span><span class="token operator">&gt;</span> s1<span class="token punctuation">;</span> stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> s2<span class="token punctuation">;</span>
    <span class="token comment">// 定义一个以二叉树的结点总数作为容量的顺序栈对象,</span>
    <span class="token comment">//栈结点结构应该能保存要返回的结点及该结点的进栈标志值。</span>
    t<span class="token operator">=</span>root<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> <span class="token operator">!</span> s1<span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span> t <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 栈非空或当前结点非空</span>
    <span class="token punctuation">{</span> 
        <span class="token keyword">while</span> <span class="token punctuation">(</span> t<span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token comment">// 当前结点非空</span>
        <span class="token punctuation">{</span> 
            s1<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span> t <span class="token punctuation">)</span> <span class="token punctuation">;</span> 
            s2<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment">//当前结点和第一进栈标志进栈s</span>
            t<span class="token operator">=</span>t<span class="token operator">-&gt;</span>leftchild<span class="token punctuation">;</span><span class="token comment">//以当前结点的左孩子作为当前结点</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> s<span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment">// 栈s非空</span>
        <span class="token punctuation">{</span> 
            s1<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span> t <span class="token punctuation">)</span><span class="token punctuation">;</span> 
            s2<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span> flag <span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment">// s1,s2栈顶结点出栈</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span> flag<span class="token operator">=</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token comment">//该结点是第二进栈而出来的</span>
            <span class="token punctuation">{</span> 
                <span class="token function">visit</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> 
                t<span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> 
            <span class="token punctuation">}</span><span class="token comment">// 访问结点</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span> 
                s1<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span> t <span class="token punctuation">)</span> <span class="token punctuation">;</span> 
                s2<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment">// 结点第二次进栈s</span>
                t<span class="token operator">=</span>t<span class="token operator">-&gt;</span>rightchild<span class="token punctuation">;</span><span class="token comment">//以当前结点的右孩子作为当前结点</span>
            <span class="token punctuation">}</span> <span class="token comment">// else</span>
        <span class="token punctuation">}</span> <span class="token comment">// if</span>
    <span class="token punctuation">}</span> <span class="token comment">// while</span>
<span class="token punctuation">}</span> <span class="token comment">// PostOrder</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>层次遍历</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">BinaryTree</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>visit<span class="token punctuation">)</span><span class="token punctuation">(</span>BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">)</span>
<span class="token comment">// 对二叉树进行层次遍历</span>
<span class="token punctuation">{</span>
    queue<span class="token operator">&lt;</span> BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span><span class="token operator">&gt;</span> q<span class="token punctuation">;</span>
    <span class="token comment">//定义一个以二叉树结点数为容量的顺序队列对象</span>
    t<span class="token operator">=</span>root<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> t<span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span>
        q<span class="token punctuation">.</span><span class="token function">EnQueue</span><span class="token punctuation">(</span>t <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 二叉树的根结点入列</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span> ！q<span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment">// 队列非空</span>
    <span class="token punctuation">{</span> 
        t<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">DeQueue</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 队头结点出队</span>
        <span class="token function">visit</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对结点t进行访问</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">-&gt;</span>leftchild<span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token comment">//左孩子非空，则入列</span>
            q<span class="token punctuation">.</span><span class="token function">EnQueue</span><span class="token punctuation">(</span>t<span class="token operator">-&gt;</span>leftchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">-&gt;</span>rightchild<span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token comment">//右孩子非空，则入列</span>
            q<span class="token punctuation">.</span><span class="token function">EnQueue</span><span class="token punctuation">(</span>t<span class="token operator">-&gt;</span>rightchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token comment">// while</span>
<span class="token punctuation">}</span> <span class="token comment">// LevelOrder</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>二叉树的建立</strong></p><p><strong>前序建立</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token function">CreateBTree</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span> 
    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>
    BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>current<span class="token punctuation">;</span>
    cin<span class="token operator">&gt;&gt;</span>ch <span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> ch<span class="token operator">==</span>’<span class="token punctuation">.</span>’ <span class="token punctuation">)</span> <span class="token comment">// 输入的是否为符号’.’</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 建立空树</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span> 
        current<span class="token operator">=</span><span class="token keyword">new</span> BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token punctuation">;</span> <span class="token comment">// 分配结点空间</span>
        current<span class="token operator">-&gt;</span>data<span class="token operator">=</span>ch<span class="token punctuation">;</span> <span class="token comment">// 填入结点值</span>
        current<span class="token operator">-&gt;</span>leftchild<span class="token operator">=</span><span class="token function">CreateBTree</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建立左子树</span>
        current<span class="token operator">-&gt;</span>rightchild<span class="token operator">=</span><span class="token function">CreateBTree</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 建立右子树</span>
        <span class="token keyword">return</span> current<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token comment">// Create</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>中序建立</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span> <span class="token function">CreateBTree</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span> 
    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>
    BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>q<span class="token punctuation">,</span><span class="token operator">*</span>current<span class="token punctuation">;</span>
    cin<span class="token operator">&gt;&gt;</span>ch <span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> ch<span class="token operator">==</span>’<span class="token punctuation">.</span>’ <span class="token punctuation">)</span> <span class="token comment">// 输入的是否为符号’.’</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 建立空树</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span> 
        q<span class="token operator">=</span><span class="token function">CreateBTree</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建立左子树</span>
        current<span class="token operator">=</span><span class="token keyword">new</span> BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token punctuation">;</span> <span class="token comment">// 分配结点空间</span>
        current<span class="token operator">-&gt;</span>data<span class="token operator">=</span>ch<span class="token punctuation">;</span> <span class="token comment">// 填入结点值</span>
        current<span class="token operator">-&gt;</span>leftchild<span class="token operator">=</span>q<span class="token punctuation">;</span> <span class="token comment">//建立左子树</span>
        current<span class="token operator">-&gt;</span>rightchild<span class="token operator">=</span><span class="token function">CreateBTree</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 建立右子树</span>
        <span class="token keyword">return</span> current<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token comment">// Create</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>后序建立</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token function">CreateBTree</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token comment">//private成员函数</span>
<span class="token punctuation">{</span> 
    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>
    BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>tl<span class="token punctuation">,</span><span class="token operator">*</span>tr<span class="token punctuation">,</span><span class="token operator">*</span>current<span class="token punctuation">;</span>
    cin<span class="token operator">&gt;&gt;</span>ch <span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> ch<span class="token operator">==</span>’<span class="token punctuation">.</span>’ <span class="token punctuation">)</span> <span class="token comment">// 输入的是否为符号’.’</span>
        <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span> <span class="token comment">// 建立空树</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span> 
        tl<span class="token operator">=</span><span class="token function">CreateBTree</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//建立左子树</span>
        tr<span class="token operator">=</span><span class="token function">CreateBTree</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 建立右子树</span>
        current<span class="token operator">=</span><span class="token keyword">new</span> BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token punctuation">;</span> <span class="token comment">// 分配结点空间</span>
        current<span class="token operator">-&gt;</span>data<span class="token operator">=</span>ch<span class="token punctuation">;</span> <span class="token comment">// 填入结点值</span>
        current<span class="token operator">-&gt;</span>leftchild<span class="token operator">=</span>tl<span class="token punctuation">;</span>
        current<span class="token operator">-&gt;</span>rightchild<span class="token operator">=</span> tr<span class="token punctuation">;</span>
        <span class="token keyword">return</span> current<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token comment">// Create</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>层次建立</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token function">CreateBTree</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token comment">//private成员函数</span>
<span class="token punctuation">{</span> 
    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>
    BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>tl<span class="token punctuation">,</span><span class="token operator">*</span>tr<span class="token punctuation">,</span><span class="token operator">*</span>current<span class="token punctuation">;</span>
    cin<span class="token operator">&gt;&gt;</span>ch <span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> ch<span class="token operator">==</span>’<span class="token punctuation">.</span>’ <span class="token punctuation">)</span> <span class="token comment">// 输入的是否为符号’.’</span>
        <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span> <span class="token comment">// 建立空树</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span> 
        tl<span class="token operator">=</span><span class="token function">CreateBTree</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//建立左子树</span>
        tr<span class="token operator">=</span><span class="token function">CreateBTree</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 建立右子树</span>
        current<span class="token operator">=</span><span class="token keyword">new</span> BinTreeNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token punctuation">;</span> <span class="token comment">// 分配结点空间</span>
        current<span class="token operator">-&gt;</span>data<span class="token operator">=</span>ch<span class="token punctuation">;</span> <span class="token comment">// 填入结点值</span>
        current<span class="token operator">-&gt;</span>leftchild<span class="token operator">=</span>tl<span class="token punctuation">;</span>
        current<span class="token operator">-&gt;</span>rightchild<span class="token operator">=</span> tr<span class="token punctuation">;</span>
        <span class="token keyword">return</span> current<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token comment">// Create</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>线索二叉树</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>Typedef <span class="token keyword">enum</span> <span class="token punctuation">{</span> Link<span class="token punctuation">,</span> Thread <span class="token punctuation">}</span> PointerTag<span class="token punctuation">;</span> <span class="token comment">//=0指针;=1线索</span>

Typedef <span class="token keyword">struct</span> <span class="token class-name">BiThrNode</span>
<span class="token punctuation">{</span> 
    TElemType data<span class="token punctuation">;</span>
    PointerTag ltag<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">BiThrNode</span> <span class="token operator">*</span>lchild<span class="token punctuation">;</span>
    PointerTag rtag；
    <span class="token keyword">struct</span> <span class="token class-name">BiThrNode</span> <span class="token operator">*</span>rchild <span class="token punctuation">;</span>
<span class="token punctuation">}</span>BiThrNode<span class="token punctuation">,</span><span class="token operator">*</span>BiThrTree；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>堆的定义</strong>：设有n个数据元素组成的序列{a 1 ,a 2 ,...,a n },若它满足下面的条件：</p>`,45),l=n("ul",null,[n("li",null,"（1）这些数据元素是一棵完全二叉树中的结点，且 a i (i=1,2,...n )是该完全二叉树中编号为i的结点；"),n("li",null,[s("（2）若2i "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",null,"≤")]),n("annotation",{encoding:"application/x-tex"},"\\leq")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7719em","vertical-align":"-0.136em"}}),n("span",{class:"mrel"},"≤")])])]),s(" n ,有"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msub",null,[n("mi",null,"a"),n("mrow",null,[n("mn",null,"2"),n("mi",null,"i")])])]),n("annotation",{encoding:"application/x-tex"},"a_{2i}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"a"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3117em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2"),n("span",{class:"mord mathnormal mtight"},"i")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])])])])]),s(),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",null,"≥")]),n("annotation",{encoding:"application/x-tex"},"\\geq")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7719em","vertical-align":"-0.136em"}}),n("span",{class:"mrel"},"≥")])])]),s(),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msub",null,[n("mi",null,"a"),n("mi",null,"i")])]),n("annotation",{encoding:"application/x-tex"},"a_i")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"a"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3117em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight"},"i")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])])])])]),s(" ;")]),n("li",null,[s("（3）若2i+1 \\leq n ,有"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msub",null,[n("mi",null,"a"),n("mrow",null,[n("mn",null,"2"),n("mi",null,"i"),n("mo",null,"+"),n("mn",null,"1")])])]),n("annotation",{encoding:"application/x-tex"},"a_{2i+1}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6389em","vertical-align":"-0.2083em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"a"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3117em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2"),n("span",{class:"mord mathnormal mtight"},"i"),n("span",{class:"mbin mtight"},"+"),n("span",{class:"mord mtight"},"1")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.2083em"}},[n("span")])])])])])])])]),s(),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",null,"≥")]),n("annotation",{encoding:"application/x-tex"},"\\geq")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7719em","vertical-align":"-0.136em"}}),n("span",{class:"mrel"},"≥")])])]),s(),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msub",null,[n("mi",null,"a"),n("mi",null,"i")])]),n("annotation",{encoding:"application/x-tex"},"a_i")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"a"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3117em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight"},"i")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])])])])]),s(" ;")])],-1),i=a(`<p>则称该序列为一个堆。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>任意节点小于（或大于）它的所有后裔，最小元（或最大元）在堆的根上（堆序性）。
堆总是一棵完全树。即除了最底层，其他层的节点都被元素填满，且最底层尽可能地从左到右填入。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>最小堆的类定义</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DefaultSize</span> <span class="token expression"><span class="token operator">=</span> <span class="token number">10</span></span></span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">MinHeap</span>
<span class="token punctuation">{</span> 
    T <span class="token operator">*</span>heap<span class="token punctuation">;</span>
    <span class="token keyword">int</span> CurrentSize<span class="token punctuation">;</span>
    <span class="token keyword">int</span> MaxHeapSize<span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">MinHeap</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> sz<span class="token operator">=</span>DefaultSize <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">MinHeap</span> <span class="token punctuation">(</span> T arr<span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">MinHeap</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">delete</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> heap<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">const</span> MinHeap<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> MinHeap <span class="token operator">&amp;</span>R <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> <span class="token function">Insert</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> T <span class="token operator">&amp;</span>x <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> <span class="token function">RemoveMin</span> <span class="token punctuation">(</span> T <span class="token operator">&amp;</span>x <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> <span class="token function">IsEmpty</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token keyword">const</span>
    <span class="token punctuation">{</span> <span class="token keyword">return</span> CurrentSize <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">bool</span> <span class="token function">IsFull</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token keyword">const</span>
    <span class="token punctuation">{</span> <span class="token keyword">return</span> CurrentSize <span class="token operator">==</span> MaxHeapSize<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">MakeEmpty</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> CurrentSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">siftDown</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> m <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">siftUp</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> start <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>初始化</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token class-name">MinHeap</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token double-colon punctuation">::</span><span class="token function">MinHeap</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> sz <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//根据给定大小maxSize,建立堆对象</span>
    MaxHeapSize<span class="token operator">=</span>DefaultSize<span class="token operator">&lt;</span>sz <span class="token operator">?</span>maxSize <span class="token operator">:</span>DefaultSize <span class="token punctuation">;</span><span class="token comment">//确定堆大小</span>
    heap <span class="token operator">=</span> <span class="token keyword">new</span> T<span class="token punctuation">[</span>MaxHeapSize<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//创建堆空间</span>
    CurrentSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//初始化</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>最小堆向下调整</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token class-name">MinHeap</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token double-colon punctuation">::</span> <span class="token function">siftDown</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> m <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// j 是 i 的左子女</span>
    T temp <span class="token operator">=</span> heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span> j <span class="token operator">&lt;=</span> m <span class="token punctuation">)</span>
    <span class="token punctuation">{</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span> j <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> heap<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span>heap<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//两子女中选小者</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> temp <span class="token operator">&lt;=</span> heap<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">)</span> 
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span> 
            heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> heap<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            i <span class="token operator">=</span> j <span class="token punctuation">;</span> 
            j <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 往下走</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>筛选法</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token class-name">MinHeap</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span> <span class="token function">MinHeap</span><span class="token punctuation">(</span>T arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span> 
    <span class="token comment">// 把最小堆初始化为数组arr .</span>
    <span class="token keyword">delete</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> heap<span class="token punctuation">;</span>
    MaxHeapSize <span class="token operator">=</span> DefaultSize <span class="token operator">&lt;</span> n <span class="token operator">?</span> n <span class="token operator">:</span> DefaultSize<span class="token punctuation">;</span>
    heap <span class="token operator">=</span> <span class="token keyword">new</span> Type <span class="token punctuation">[</span>MaxHeapSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> 
        heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//数组传送</span>
    CurrentSize <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token comment">//当前堆大小</span>
    <span class="token keyword">int</span> currentPos <span class="token operator">=</span> <span class="token punctuation">(</span>CurrentSize<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//最后非叶</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span> currentPos <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span> 
        <span class="token comment">//从下到上逐步扩大,形成堆</span>
        <span class="token function">siftDown</span> <span class="token punctuation">(</span> currentPos<span class="token punctuation">,</span> CurrentSize<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//从currentPos开始,到CurrentSize为止, 调整</span>
        currentPos<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>最小堆向上调整</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token class-name">MinHeap</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token double-colon punctuation">::</span><span class="token function">siftUp</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> start <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//从 start 开始,向上直到0,调整堆</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> start<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// i 是 j 的双亲</span>
    T temp <span class="token operator">=</span> heap<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span> j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span> heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> temp <span class="token punctuation">)</span> 
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span> 
            heap<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            j <span class="token operator">=</span> i<span class="token punctuation">;</span> 
            i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 往上走</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    heap<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>堆插入算法</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">bool</span> <span class="token class-name">MinHeap</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token double-colon punctuation">::</span><span class="token function">Insert</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> T <span class="token operator">&amp;</span>x <span class="token punctuation">)</span>
<span class="token punctuation">{</span> <span class="token comment">//在堆中插入新元素 x</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> CurrentSize <span class="token operator">==</span> MaxHeapSize <span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;堆已满&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    heap<span class="token punctuation">[</span>CurrentSize<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token comment">//插在表尾</span>
    <span class="token function">siftUp</span> <span class="token punctuation">(</span>CurrentSize<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//向上调整为堆</span>
    CurrentSize<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//堆元素增一</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>堆删除算法</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">int</span> <span class="token class-name">MinHeap</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token double-colon punctuation">::</span><span class="token function">RemoveMin</span> <span class="token punctuation">(</span> T <span class="token operator">&amp;</span>x <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>CurrentSize <span class="token punctuation">)</span>
    <span class="token punctuation">{</span> 
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;堆已空 &quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    x <span class="token operator">=</span> heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//最小元素出队列</span>
    heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> heap<span class="token punctuation">[</span>CurrentSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    CurrentSize<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token function">siftDown</span> <span class="token punctuation">(</span> <span class="token number">0</span><span class="token punctuation">,</span> CurrentSize<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//从0号位置开始自顶向下调整为堆</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>哈夫曼看实验</strong></p>`,17),u=[c,l,i];function r(k,d){return t(),e("div",null,u)}const b=p(o,[["render",r],["__file","Chapter5.html.vue"]]),g=JSON.parse('{"path":"/MD/School/DataStructure/Chapter5.html","title":"第5章 树的基本概念","lang":"zh-CN","frontmatter":{"title":"第5章 树的基本概念","category":"CS","tag":"DataStructure","description":"树的基本术语 1.根 2.孩子、双亲和兄弟 、祖先、子孙 3.分支结点和叶子结点 4.结点的度和树的度 5.结点的层数和树的深度 6.路径和路径长度 7.有序树和无序树 8.森林 树的抽象数据类型 树的存储结构 链式结构 不定长的多重链式结构 定长的多重链式结构 孩子链表示方法 双亲表示法 一般树转化为二叉树 加线：在个兄弟结点之间加一连线。 抹线：对...","head":[["meta",{"property":"og:url","content":"https://www.wataminc.top/MD/School/DataStructure/Chapter5.html"}],["meta",{"property":"og:site_name","content":"Watamin C"}],["meta",{"property":"og:title","content":"第5章 树的基本概念"}],["meta",{"property":"og:description","content":"树的基本术语 1.根 2.孩子、双亲和兄弟 、祖先、子孙 3.分支结点和叶子结点 4.结点的度和树的度 5.结点的层数和树的深度 6.路径和路径长度 7.有序树和无序树 8.森林 树的抽象数据类型 树的存储结构 链式结构 不定长的多重链式结构 定长的多重链式结构 孩子链表示方法 双亲表示法 一般树转化为二叉树 加线：在个兄弟结点之间加一连线。 抹线：对..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-18T09:24:14.000Z"}],["meta",{"property":"article:author","content":"Watamin C"}],["meta",{"property":"article:tag","content":"DataStructure"}],["meta",{"property":"article:modified_time","content":"2024-02-18T09:24:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第5章 树的基本概念\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-18T09:24:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Watamin C\\",\\"url\\":\\"www.wataminc.top\\"}]}"]]},"headers":[],"git":{"createdTime":1708177507000,"updatedTime":1708248254000,"contributors":[{"name":"WataminC","email":"1286982501@qq.com","commits":2}]},"readingTime":{"minutes":12.68,"words":3805},"filePathRelative":"MD/School/DataStructure/Chapter5.md","localizedDate":"2024年2月17日","excerpt":"<p><strong>树的基本术语</strong></p>\\n<ul>\\n<li>1.根</li>\\n<li>2.孩子、双亲和兄弟 、祖先、子孙</li>\\n<li>3.分支结点和叶子结点</li>\\n<li>4.结点的度和树的度</li>\\n<li>5.结点的层数和树的深度</li>\\n<li>6.路径和路径长度</li>\\n<li>7.有序树和无序树</li>\\n<li>8.森林</li>\\n</ul>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>树的操作（实际生活的抽象）\\n（1）求根操作 Root(x)\\n求出当前树中结点x的根结点；\\n（2）求双亲操作 Parent(x) 求出当前树中结点x的双亲结点；\\n（3）求孩子操作 Child(x，i) 求出当前树中结点x的第i个孩子结点；\\n（4）插入子树操作 Insert(x,i,s) 当前树中插入根结点为s的子树，并\\n作为结点x的第i棵子树；\\n（5）删除子树操作 Delete(x,i) 在当前树中删除结点x的第i棵子树；\\n（6）树的遍历操作 Travel( ) 按某种次序依次访问当前树中的各个\\n结点，并使每个结点只被访问一次；\\n（7）清除操作 Clear( ) 将当前树置为空树；\\n（8）求树高 Depth( ) 求出树的高度；\\n（9）树建立操作 Create( ) 建立一棵非空的树并成为当前树；\\n</code></pre></div>","autoDesc":true}');export{b as comp,g as data};
