import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as e,a as s,e as n,f as a}from"./app-BBNaamfa.js";const o={},c=s("h1",{id:"第二章-线性表",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#第二章-线性表"},[s("span",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"normal"},"§")]),s("annotation",{encoding:"application/x-tex"},"\\S")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord"},"§")])])]),n(" 第二章：线性表")])])],-1),l=s("h3",{id:"线性表的逻辑结构及其基本操作",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#线性表的逻辑结构及其基本操作"},[s("span",null,[s("strong",null,"线性表的逻辑结构及其基本操作"),n(":")])])],-1),i=s("p",null,[n("线性表是"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",null,"≥"),s("mn",null,"0"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"n(n \\geq 0)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≥"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"0"),s("span",{class:"mclose"},")")])])]),n("个相同数据元素"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"a"),s("mn",null,"0")]),s("mo",{separator:"true"},","),s("msub",null,[s("mi",null,"a"),s("mn",null,"1")]),s("mo",{separator:"true"},","),s("mo",null,"⋯"),s("mtext",null," "),s("mo",{separator:"true"},","),s("msub",null,[s("mi",null,"a"),s("mrow",null,[s("mi",null,"n"),s("mo",null,"−"),s("mn",null,"1")])])]),s("annotation",{encoding:"application/x-tex"},"a_0, a_1, \\cdots, a_{n-1}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6389em","vertical-align":"-0.2083em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"a"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"0")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"a"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"minner"},"⋯"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"a"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n"),s("span",{class:"mbin mtight"},"−"),s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2083em"}},[s("span")])])])])])])])]),n("构成的有限序列")],-1),r=s("p",null,[s("strong",null,"形式化定义"),n(":")],-1),u=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"L"),s("mi",null,"i"),s("mi",null,"n"),s("mi",null,"e"),s("mi",null,"a"),s("mi",null,"r"),s("mi",null,"l"),s("mi",null,"i"),s("mi",null,"s"),s("mi",null,"t"),s("mo",null,"="),s("mo",{stretchy:"false"},"("),s("mi",null,"D"),s("mo",{separator:"true"},","),s("mi",null,"R"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"Linearlist = (D, R)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal"},"L"),s("span",{class:"mord mathnormal"},"in"),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.00773em"}},"R"),s("span",{class:"mclose"},")")])])])],-1),k=s("p",null,[s("strong",null,"线性表的逻辑特征是"),n("：")],-1),m=s("ul",null,[s("li",null,"在非空的线性表，有且仅有一个开始结点a 1 ，它没有直接前趋，而仅有一个直接后继a 2"),s("li",null,"有且仅有一个终端结点a n ，它没有直接后继，而 仅有一个直接前趋a n-1"),s("li",null,[n("其余的内部结点"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"a"),s("mi",null,"i")]),s("mo",{stretchy:"false"},"("),s("mn",null,"2"),s("mo",null,"≤"),s("mi",null,"i"),s("mo",null,"≤"),s("mi",null,"n"),s("mo",null,"−"),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"a_i (2 \\leq i \\leq n-1)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"a"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"2"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7955em","vertical-align":"-0.136em"}}),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])]),n("都有且仅有一个直接前趋"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"a"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"−"),s("mn",null,"1")])])]),s("annotation",{encoding:"application/x-tex"},"a_{i-1}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6389em","vertical-align":"-0.2083em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"a"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mbin mtight"},"−"),s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2083em"}},[s("span")])])])])])])])]),n("和一个直接后继"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"a"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"+"),s("mn",null,"1")])])]),s("annotation",{encoding:"application/x-tex"},"a_{i+1}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6389em","vertical-align":"-0.2083em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"a"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2083em"}},[s("span")])])])])])])])]),n("线性表是一种典型的线性结构。")]),s("li",null,"数据的运算是定义在逻辑结构上的，而运算的")],-1),d=a(`<p>具体实现则是在存储结构上进行的。</p><p><strong>线性表的抽象类</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">LinearList</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
<span class="token function">LinearList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//构造函数</span>
～<span class="token function">LinearList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//析构函数</span>
<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//求表最大体积</span>
<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//求表长度</span>
<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">Search</span><span class="token punctuation">(</span>T x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//搜索</span>
<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">Locate</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//定位</span>
<span class="token keyword">virtual</span> T<span class="token operator">*</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//取值</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> T x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//赋值</span>
<span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> T x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//插入</span>
<span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">Remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> T<span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//删除</span>
<span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//判表空</span>
<span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">IsFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//判表满</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>；   <span class="token comment">//排序</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>；  <span class="token comment">//输入</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>； <span class="token comment">//输出</span>
<span class="token keyword">virtual</span> LinearList<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>LinearList<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">&amp;</span> L<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//复制</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>顺序表类的定义</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> <span class="token keyword">int</span> defaultSize <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">SeqList</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">LinearList</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
    T <span class="token operator">*</span>data<span class="token punctuation">;</span>
    <span class="token comment">//存放数组</span>
    <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span>
    <span class="token comment">//最大可容纳表项的项数</span>
    <span class="token keyword">int</span> last<span class="token punctuation">;</span>
    <span class="token comment">//数组中最后一个元素的下标</span>
    <span class="token keyword">void</span> <span class="token function">reSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> newSize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//改变数组空间大小</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">SeqList</span><span class="token punctuation">(</span><span class="token keyword">int</span> sz <span class="token operator">=</span> defaultSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//构造函数</span>
    <span class="token function">SeqList</span><span class="token punctuation">(</span>SeqList<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">&amp;</span> L<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//复制构造函数</span>
    ～<span class="token function">SeqList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">delete</span><span class="token punctuation">[</span> <span class="token punctuation">]</span> data<span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token comment">//析构函数</span>
    <span class="token keyword">int</span> <span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token keyword">return</span> maxSize<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment">//求表最大容量</span>
    <span class="token keyword">int</span> <span class="token function">Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token keyword">return</span> last<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token comment">//计算表长度</span>
    <span class="token keyword">int</span> <span class="token function">Search</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
    <span class="token comment">//搜索x在表中位置，函数返回表项序号</span>
    <span class="token keyword">int</span> <span class="token function">Locate</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
    <span class="token comment">//定位第 i 个表项，函数返回表项序号</span>
    <span class="token keyword">bool</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> T <span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//取第i个元素</span>
    <span class="token keyword">bool</span> <span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> T <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//插入</span>
    <span class="token keyword">bool</span> <span class="token function">Remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> T<span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//删除</span>
    ……
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>顺序表的构造函数</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token class-name">SeqList</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">SeqList</span><span class="token punctuation">(</span><span class="token keyword">int</span> sz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>sz <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    maxSize <span class="token operator">=</span> sz<span class="token punctuation">;</span> last <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    data <span class="token operator">=</span> <span class="token keyword">new</span> T<span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//创建表存储数组</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//动态分配失败 </span>
        cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;存储分配错误！&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>复制构造函数</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token class-name">SeqList</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">SeqList</span><span class="token punctuation">(</span>SeqList<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">&amp;</span> L<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    T value<span class="token punctuation">;</span>
    maxSize <span class="token operator">=</span> L<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    last <span class="token operator">=</span> L<span class="token punctuation">.</span><span class="token function">Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    data <span class="token operator">=</span> <span class="token keyword">new</span> T<span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//创建存储数组</span>
    <span class="token comment">//动态分配失败</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;存储分配错误！&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> last<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token comment">//传送各个表项</span>
    <span class="token punctuation">{</span> 
        L<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span>value<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>顺序表按值查找算法</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">int</span> <span class="token class-name">SeqList</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">search</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token comment">//在表中顺序搜索与给定值 x 匹配的表项，找到则</span>
    <span class="token comment">//函数返回该表项是第几个元素，否则函数返回0</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span>last<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token comment">//顺序搜索</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> x <span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span> <span class="token comment">//表项序号和表项位置差1</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//搜索失败</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>顺序表的插入算法</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">bool</span> <span class="token class-name">SeqList</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">Insert</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> T<span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//将新元素x插入到表中第i (1≤i≤n+1) 个表项位</span>
    <span class="token comment">//置。函数返回插入成功的信息</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">==</span> maxSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> 
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token comment">//表满</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">&gt;</span> <span class="token function">Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> 
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token comment">//参数i不合理</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> last<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>   <span class="token comment">//依次后移</span>
        data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token comment">//插入(第 i 表项在data[i-1]处)</span>
    last<span class="token operator">++</span><span class="token punctuation">;</span> 
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">//插入成功</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>顺序表的删除算法</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">bool</span> <span class="token class-name">SeqList</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">Remove</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> T<span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//从表中删除第 i (1≤i≤n) 个表项，通过引用型参</span>
    <span class="token comment">//数 x 返回被删元素。函数返回删除成功信息</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token comment">//表空</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">&gt;</span> last<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//参数i不合理</span>
    x <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> last<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//依次前移，填补</span>
        data<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    last<span class="token operator">--</span><span class="token punctuation">;</span> 
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>顺序表的优点</strong>：</p><ul><li>无须为表示节点间的逻辑关系而增加额外的存储空间</li></ul>`,17),v=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"存储密度"),s("mo",null,"="),s("mfrac",null,[s("mtext",null,"数据元素的值所需的存储量"),s("mtext",null,"该数据元素所需的存储总量")])]),s("annotation",{encoding:"application/x-tex"},"\\text{存储密度} = \\frac{\\text{数据元素的值所需的存储量}}{\\text{该数据元素所需的存储总量}}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"存储密度")]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.2173em","vertical-align":"-0.345em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8723em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord text mtight"},[s("span",{class:"mord cjk_fallback mtight"},"该数据元素所需的存储总量")])])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord text mtight"},[s("span",{class:"mord cjk_fallback mtight"},"数据元素的值所需的存储量")])])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.345em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])])])])],-1),b=a(`<ul><li>可以方便的随机存取表中的任一节点</li></ul><p><strong>顺序表的缺点</strong></p><ul><li>插入和删除运算不方便</li><li>由于要求占用连续的存储空间，存储分配只能预先进行</li></ul><p><strong>结点类的定义</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token punctuation">{</span>
    <span class="token comment">//链表结点类的定义</span>
    T data<span class="token punctuation">;</span>
    <span class="token comment">//数据域</span>
    LinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span> link<span class="token punctuation">;</span>
    <span class="token comment">//链指针域</span>
    <span class="token function">LinkNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> link <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">//构造函数</span>
    <span class="token function">LinkNode</span><span class="token punctuation">(</span>T item<span class="token punctuation">,</span> LinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span> data <span class="token operator">=</span> item<span class="token punctuation">;</span> link <span class="token operator">=</span> ptr<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">//构造函数</span>
    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span> <span class="token punctuation">(</span>T x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> data<span class="token punctuation">.</span>key <span class="token operator">==</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">//重载函数，判相等</span>
    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>T x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> data<span class="token punctuation">.</span>key <span class="token operator">!=</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>单链表的定义</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">List</span> <span class="token punctuation">{</span>
<span class="token comment">//单链表类定义, 不用继承也可实现</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
    LinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span> first<span class="token punctuation">;</span> <span class="token comment">//表头指针</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> first <span class="token operator">=</span> <span class="token keyword">new</span> LinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">//构造函数</span>
    <span class="token function">List</span><span class="token punctuation">(</span>T x<span class="token punctuation">)</span> <span class="token punctuation">{</span> first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token generic-function"><span class="token function">LinkNode</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token function">List</span><span class="token punctuation">(</span> List<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">&amp;</span> L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//复制构造函数</span>
    <span class="token operator">~</span><span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token comment">//析构函数</span>
    <span class="token keyword">void</span> <span class="token function">makeEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将链表置为空表</span>
    <span class="token keyword">int</span> <span class="token function">Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token comment">//计算链表的长度</span>
    LinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token function">Search</span><span class="token punctuation">(</span>T x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//搜索含x元素</span>
    LinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token function">Locate</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定位第i个元素</span>
    T <span class="token operator">*</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取出第i元素值</span>
    <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> T x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新第i元素值</span>
    <span class="token keyword">bool</span> <span class="token function">Insert</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> T x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在第i元素后插入</span>
    <span class="token keyword">bool</span> <span class="token function">Remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> T<span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//删除第i个元素</span>
    <span class="token keyword">bool</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token comment">//判表空否</span>
    <span class="token punctuation">{</span> <span class="token keyword">return</span> first<span class="token operator">-&gt;</span>link <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    LinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> first<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">setFirst</span><span class="token punctuation">(</span>LinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>f <span class="token punctuation">)</span> <span class="token punctuation">{</span> first <span class="token operator">=</span> f<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">Sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//排序</span>
    <span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//输出整条链表的结点值</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出所有结点值</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
Void <span class="token class-name">List</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token double-colon punctuation">::</span> <span class="token function">Print</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    LinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>p <span class="token operator">=</span> first<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>
    <span class="token comment">//检测指针 p 指示第1个结点</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span> p <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>   <span class="token comment">//逐个结点检测</span>
        cout<span class="token operator">&lt;&lt;</span>p<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>求长度</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">int</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token double-colon punctuation">::</span> <span class="token function">Length</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">{</span>
    LinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>p <span class="token operator">=</span> first<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>
    <span class="token comment">//检测指针 p 指示第1个结点</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span><span class="token comment">//逐个结点检测</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span> 
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>定位算法</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
LinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">Locate</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//函数返回表中第 i 个元素的地址。若i &lt; 0或 i 超</span>
    <span class="token comment">//出表中结点个数，则返回0。</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//i不合理</span>
    LinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span> current <span class="token operator">=</span> first<span class="token punctuation">;</span> <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span> current <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> i <span class="token punctuation">)</span>
    <span class="token punctuation">{</span> current <span class="token operator">=</span> current<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">return</span> current<span class="token punctuation">;</span> <span class="token comment">//返回第 i 号结点地址或0</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>单链表搜索算法</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
LinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">Search</span><span class="token punctuation">(</span>T x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//在表中搜索含数据x的结点, 搜索成功时函数返</span>
    <span class="token comment">//该结点地址; 否则返回0。</span>
    LinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span> current <span class="token operator">=</span> first<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span> current <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> current<span class="token operator">-&gt;</span>data <span class="token operator">!=</span> x <span class="token punctuation">)</span>
    current <span class="token operator">=</span> current<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>
    <span class="token comment">//沿着链找含x结点</span>
    <span class="token keyword">return</span> current<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>单链表的插入算法</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">bool</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">Insert</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> T x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//将新元素 x 插入在链表中第 i 个结点之后。</span>
    LinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>current <span class="token operator">=</span> <span class="token function">Locate</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//无插入位置</span>
    LinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>newNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token generic-function"><span class="token function">LinkNode</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建新结点</span>
    newNode<span class="token operator">-&gt;</span>link <span class="token operator">=</span> current<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>  <span class="token comment">//链入</span>
    current<span class="token operator">-&gt;</span>link <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">//插入成功</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>单链表的删除算法</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">bool</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">Remove</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> T<span class="token operator">&amp;</span> x <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//删除链表第i个元素, 通过引用参数x返回元素值</span>
    LinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>current <span class="token operator">=</span> <span class="token function">Locate</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> current <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> current<span class="token operator">-&gt;</span>link <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token comment">//删除不成功</span>
    LinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>del <span class="token operator">=</span> current<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>
    current<span class="token operator">-&gt;</span>link <span class="token operator">=</span> del<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>
    x <span class="token operator">=</span> del<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span> <span class="token keyword">delete</span> del<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>析构函数</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
List<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    LinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>first <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    q <span class="token operator">=</span> first<span class="token punctuation">;</span>  <span class="token comment">//保存被删结点</span>
    first <span class="token operator">=</span> first<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span> <span class="token comment">//从链上摘下该结点</span>
    <span class="token keyword">delete</span> q<span class="token punctuation">;</span>   <span class="token comment">//删除</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>其他形式的链表</p><p><strong>循环链表</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">CircLinkNode</span> <span class="token punctuation">{</span>
    <span class="token comment">//链表结点类定义</span>
    T data<span class="token punctuation">;</span>
    CircLinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>link<span class="token punctuation">;</span>
    <span class="token function">CircLinkNode</span> <span class="token punctuation">(</span> CircLinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span> next <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> link <span class="token operator">=</span> next<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token function">CircLinkNode</span> <span class="token punctuation">(</span> T d<span class="token punctuation">,</span> CircLinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span> next <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> data <span class="token operator">=</span> d<span class="token punctuation">;</span> link <span class="token operator">=</span> next<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">bool</span> Operator<span class="token operator">==</span><span class="token punctuation">(</span>T x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> data<span class="token punctuation">.</span>key <span class="token operator">==</span> x<span class="token punctuation">.</span>key<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">bool</span> Operator<span class="token operator">!=</span><span class="token punctuation">(</span>T x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> data<span class="token punctuation">.</span>key <span class="token operator">!=</span> x<span class="token punctuation">.</span>key<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token comment">//链表类定义</span>
<span class="token keyword">class</span> <span class="token class-name">CircList</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    CircLinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>first<span class="token punctuation">,</span> <span class="token operator">*</span>last<span class="token punctuation">;</span> <span class="token comment">//头指针, 尾指针</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">CircList</span><span class="token punctuation">(</span><span class="token keyword">const</span> T x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//构造函数</span>
    <span class="token function">CircList</span><span class="token punctuation">(</span>CircList<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">&amp;</span> L<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//复制构造函数</span>
    ～<span class="token function">CircList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//析构函数</span>
    <span class="token keyword">int</span> <span class="token function">Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span> <span class="token comment">//计算链表长度</span>
    <span class="token keyword">bool</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> first<span class="token operator">-&gt;</span>link <span class="token operator">==</span> first<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">//判表空否</span>
    CircLinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>   <span class="token comment">//返回表头结点地址</span>
    <span class="token keyword">void</span> <span class="token function">setHead</span> <span class="token punctuation">(</span> CircLinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>p <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置表头结点地址</span>
    CircLinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token function">Search</span> <span class="token punctuation">(</span> T x <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//搜索</span>
    CircLinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token function">Locate</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//定位</span>
    T <span class="token operator">*</span><span class="token function">getData</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//提取</span>
    <span class="token keyword">void</span> <span class="token function">setData</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> T x <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//修改</span>
    <span class="token keyword">bool</span> <span class="token function">Insert</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> T x <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//插入</span>
    <span class="token keyword">bool</span> <span class="token function">Remove</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> T<span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//删除</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>循环链表的搜索算法</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
CircLinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span> <span class="token class-name">CircList</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">Search</span><span class="token punctuation">(</span> T x <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//在链表中从头搜索其数据值为 x 的结点</span>
    current <span class="token operator">=</span> first<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span> current <span class="token operator">!=</span> first <span class="token operator">&amp;&amp;</span> current<span class="token operator">-&gt;</span>data <span class="token operator">!=</span> x <span class="token punctuation">)</span>
        current <span class="token operator">=</span> current<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>
    <span class="token keyword">return</span> current<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>双向循环链表</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">DblNode</span> <span class="token punctuation">{</span>
    <span class="token comment">//链表结点类定义</span>
    T data<span class="token punctuation">;</span>
    <span class="token comment">//链表结点数据</span>
    DblNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>lLink<span class="token punctuation">,</span> <span class="token operator">*</span>rLink<span class="token punctuation">;</span>
    <span class="token comment">//前驱、后继指针</span>
    <span class="token function">DblNode</span> <span class="token punctuation">(</span> DblNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> DblNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span> r <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span> lLink <span class="token operator">=</span> l<span class="token punctuation">;</span> rLink <span class="token operator">=</span> r<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">//构造函数</span>
    <span class="token function">DblNode</span> <span class="token punctuation">(</span> T value<span class="token punctuation">,</span> DblNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> DblNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span> data <span class="token operator">=</span> value<span class="token punctuation">;</span> lLink <span class="token operator">=</span> l<span class="token punctuation">;</span> rLink <span class="token operator">=</span> r<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">//构造函数</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">DblList</span> <span class="token punctuation">{</span>
<span class="token comment">//链表类定义</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">DblList</span> <span class="token punctuation">(</span> T uniqueVal <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//构造函数</span>
        first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token generic-function"><span class="token function">DblNode</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span> <span class="token punctuation">(</span>uniqueVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
        first<span class="token operator">-&gt;</span>rLink <span class="token operator">=</span> first<span class="token operator">-&gt;</span>lLink <span class="token operator">=</span> first<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    DblNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token function">getFirst</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> first<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">setFirst</span> <span class="token punctuation">(</span> DblNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>ptr <span class="token punctuation">)</span> <span class="token punctuation">{</span> first <span class="token operator">=</span> ptr<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    DblNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token function">Search</span> <span class="token punctuation">(</span> T x<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//在链表中按d指示方向寻找等于给定值x的结点,</span>
    <span class="token comment">//d=0按前驱方向,d≠0按后继方向</span>
    DblNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token function">Locate</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> d <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//在链表中定位序号为i(≥0)的结点, d=0按前驱方</span>
    <span class="token comment">//向,d≠0按后继方向</span>
    <span class="token keyword">bool</span> <span class="token function">Insert</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> T x<span class="token punctuation">,</span> <span class="token keyword">int</span> d <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//在第i个结点后插入一个包含有值x的新结点,d=0</span>
    <span class="token comment">//按前驱方向,d≠0按后继方向</span>
    <span class="token keyword">bool</span> <span class="token function">Remove</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> T<span class="token operator">&amp;</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> d <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//删除第i个结点</span>
    <span class="token keyword">bool</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> first<span class="token operator">-&gt;</span>rlink <span class="token operator">==</span> first<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token comment">//判双链表空否</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    DblNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>first<span class="token punctuation">;</span>  <span class="token comment">//表头指针</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>双向循环链表的搜索算法</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
DblNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token class-name">DblList</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">Search</span> <span class="token punctuation">(</span> T x <span class="token punctuation">,</span> <span class="token keyword">int</span> d <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//在双向循环链表中寻找其值等于x的结点。</span>
    DblNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>current <span class="token operator">=</span> <span class="token punctuation">(</span>d <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> first<span class="token operator">-&gt;</span>lLink <span class="token operator">:</span> first<span class="token operator">-&gt;</span>rLink<span class="token punctuation">;</span> <span class="token comment">//按d确定搜索方向</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span> current <span class="token operator">!=</span> first <span class="token operator">&amp;&amp;</span> current<span class="token operator">-&gt;</span>data <span class="token operator">!=</span> x <span class="token punctuation">)</span>
        current <span class="token operator">=</span> <span class="token punctuation">(</span>d <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> current<span class="token operator">-&gt;</span>lLink <span class="token operator">:</span> current<span class="token operator">-&gt;</span>rLink<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> current <span class="token operator">!=</span> first <span class="token punctuation">)</span> 
        <span class="token keyword">return</span> current<span class="token punctuation">;</span> <span class="token comment">//搜索成功</span>
    <span class="token keyword">else</span> 
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//搜索失败</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>双向循环链表的插入算法</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">bool</span> <span class="token class-name">DblList</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">Insert</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> T x<span class="token punctuation">,</span> <span class="token keyword">int</span> d <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//建立一个包含有值x的新结点, 并将其按 d 指定的</span>
    <span class="token comment">//方向插入到第i个结点之后。</span>
    DblNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>current <span class="token operator">=</span> <span class="token function">Locate</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//按d指示方向查找第i个结点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> current <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> 
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//插入失败</span>
    DblNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>newNd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token generic-function"><span class="token function">DblNode</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//前驱方向:插在第i个结点左侧</span>
        newNd<span class="token operator">-&gt;</span>lLink <span class="token operator">=</span> current<span class="token operator">-&gt;</span>lLink<span class="token punctuation">;</span> <span class="token comment">//链入lLink链</span>
        current<span class="token operator">-&gt;</span>lLink <span class="token operator">=</span> newNd<span class="token punctuation">;</span>
        newNd<span class="token operator">-&gt;</span>lLink<span class="token operator">-&gt;</span>rLink <span class="token operator">=</span> newNd<span class="token punctuation">;</span> <span class="token comment">//链入rLink链</span>
        newNd<span class="token operator">-&gt;</span>rLink <span class="token operator">=</span> current<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">//后继方向:插在第i个结点后面</span>
        newNd<span class="token operator">-&gt;</span>rLink <span class="token operator">=</span> current<span class="token operator">-&gt;</span>rLink<span class="token punctuation">;</span> <span class="token comment">//链入rLink链</span>
        current<span class="token operator">-&gt;</span>rLink <span class="token operator">=</span> newNd<span class="token punctuation">;</span>
        newNd<span class="token operator">-&gt;</span>rLink<span class="token operator">-&gt;</span>lLink <span class="token operator">=</span> newNd<span class="token punctuation">;</span> <span class="token comment">//链入lLink链</span>
        newNd<span class="token operator">-&gt;</span>lLink <span class="token operator">=</span> current<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">//插入成功</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,33),g=[c,l,i,r,u,k,m,d,v,b];function y(h,w){return t(),e("div",null,g)}const L=p(o,[["render",y],["__file","Chapter2.html.vue"]]),T=JSON.parse('{"path":"/MD/School/DataStructure/Chapter2.html","title":"第2章 线性表","lang":"zh-CN","frontmatter":{"title":"第2章 线性表","category":"CS","tag":"DataStructure","description":"§ 第二章：线性表 线性表的逻辑结构及其基本操作: 线性表是n(n≥0)个相同数据元素a0​,a1​,⋯,an−1​构成的有限序列 形式化定义: Linearlist=(D,R) 线性表的逻辑特征是： 在非空的线性表，有且仅有一个开始结点a 1 ，它没有直接前趋，而仅有一个直接后继a 2 有且仅有一个终端结点a n ，它没有直接后继，而 仅有一个直接前...","head":[["meta",{"property":"og:url","content":"https://www.wataminc.top/MD/School/DataStructure/Chapter2.html"}],["meta",{"property":"og:site_name","content":"Watamin C"}],["meta",{"property":"og:title","content":"第2章 线性表"}],["meta",{"property":"og:description","content":"§ 第二章：线性表 线性表的逻辑结构及其基本操作: 线性表是n(n≥0)个相同数据元素a0​,a1​,⋯,an−1​构成的有限序列 形式化定义: Linearlist=(D,R) 线性表的逻辑特征是： 在非空的线性表，有且仅有一个开始结点a 1 ，它没有直接前趋，而仅有一个直接后继a 2 有且仅有一个终端结点a n ，它没有直接后继，而 仅有一个直接前..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-18T09:24:14.000Z"}],["meta",{"property":"article:author","content":"Watamin C"}],["meta",{"property":"article:tag","content":"DataStructure"}],["meta",{"property":"article:modified_time","content":"2024-02-18T09:24:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第2章 线性表\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-18T09:24:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Watamin C\\",\\"url\\":\\"www.wataminc.top\\"}]}"]]},"headers":[{"level":3,"title":"线性表的逻辑结构及其基本操作:","slug":"线性表的逻辑结构及其基本操作","link":"#线性表的逻辑结构及其基本操作","children":[]}],"git":{"createdTime":1708177507000,"updatedTime":1708248254000,"contributors":[{"name":"WataminC","email":"1286982501@qq.com","commits":2}]},"readingTime":{"minutes":9.17,"words":2752},"filePathRelative":"MD/School/DataStructure/Chapter2.md","localizedDate":"2024年2月17日","excerpt":"\\n<h3><strong>线性表的逻辑结构及其基本操作</strong>:</h3>\\n<p>线性表是<span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mi>n</mi><mo stretchy=\\"false\\">(</mo><mi>n</mi><mo>≥</mo><mn>0</mn><mo stretchy=\\"false\\">)</mo></mrow><annotation encoding=\\"application/x-tex\\">n(n \\\\geq 0)</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:1em;vertical-align:-0.25em;\\"></span><span class=\\"mord mathnormal\\">n</span><span class=\\"mopen\\">(</span><span class=\\"mord mathnormal\\">n</span><span class=\\"mspace\\" style=\\"margin-right:0.2778em;\\"></span><span class=\\"mrel\\">≥</span><span class=\\"mspace\\" style=\\"margin-right:0.2778em;\\"></span></span><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:1em;vertical-align:-0.25em;\\"></span><span class=\\"mord\\">0</span><span class=\\"mclose\\">)</span></span></span></span>个相同数据元素<span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><msub><mi>a</mi><mn>0</mn></msub><mo separator=\\"true\\">,</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator=\\"true\\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\\"true\\">,</mo><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\\"application/x-tex\\">a_0, a_1, \\\\cdots, a_{n-1}</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.6389em;vertical-align:-0.2083em;\\"></span><span class=\\"mord\\"><span class=\\"mord mathnormal\\">a</span><span class=\\"msupsub\\"><span class=\\"vlist-t vlist-t2\\"><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:0.3011em;\\"><span style=\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\"><span class=\\"pstrut\\" style=\\"height:2.7em;\\"></span><span class=\\"sizing reset-size6 size3 mtight\\"><span class=\\"mord mtight\\">0</span></span></span></span><span class=\\"vlist-s\\">​</span></span><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:0.15em;\\"><span></span></span></span></span></span></span><span class=\\"mpunct\\">,</span><span class=\\"mspace\\" style=\\"margin-right:0.1667em;\\"></span><span class=\\"mord\\"><span class=\\"mord mathnormal\\">a</span><span class=\\"msupsub\\"><span class=\\"vlist-t vlist-t2\\"><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:0.3011em;\\"><span style=\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\"><span class=\\"pstrut\\" style=\\"height:2.7em;\\"></span><span class=\\"sizing reset-size6 size3 mtight\\"><span class=\\"mord mtight\\">1</span></span></span></span><span class=\\"vlist-s\\">​</span></span><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:0.15em;\\"><span></span></span></span></span></span></span><span class=\\"mpunct\\">,</span><span class=\\"mspace\\" style=\\"margin-right:0.1667em;\\"></span><span class=\\"minner\\">⋯</span><span class=\\"mspace\\" style=\\"margin-right:0.1667em;\\"></span><span class=\\"mspace\\" style=\\"margin-right:0.1667em;\\"></span><span class=\\"mpunct\\">,</span><span class=\\"mspace\\" style=\\"margin-right:0.1667em;\\"></span><span class=\\"mord\\"><span class=\\"mord mathnormal\\">a</span><span class=\\"msupsub\\"><span class=\\"vlist-t vlist-t2\\"><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:0.3011em;\\"><span style=\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\"><span class=\\"pstrut\\" style=\\"height:2.7em;\\"></span><span class=\\"sizing reset-size6 size3 mtight\\"><span class=\\"mord mtight\\"><span class=\\"mord mathnormal mtight\\">n</span><span class=\\"mbin mtight\\">−</span><span class=\\"mord mtight\\">1</span></span></span></span></span><span class=\\"vlist-s\\">​</span></span><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:0.2083em;\\"><span></span></span></span></span></span></span></span></span></span>构成的有限序列</p>","autoDesc":true}');export{L as comp,T as data};
