import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,f as e}from"./app-CB6WPUYB.js";const l="/assets/image-2-DavlCJRo.png",t="/assets/image-3-CGyH7cVu.png",i="/assets/image-4-CEPcozGy.png",p="/assets/image-BilAkcro.png",o="/assets/image-1-BXIjxXib.png",c={},u=e('<h3 id="_1、安全性定义" tabindex="-1"><a class="header-anchor" href="#_1、安全性定义"><span>1、安全性定义</span></a></h3><ul><li>安全性是防止非法用户进入数据库，以及合法用户进入数据库后做了（未授权的）非法操作。</li><li>完整性是防止非法数据进入数据库，即使是合法用户及合法操作产生的。 <ul><li>目的：防止非法、不合语义的数据被输入和输出，即所谓的“垃圾进垃圾出”（Garbage In Garbage Out）</li></ul></li></ul><h3 id="_2-掌握用sql授予权限和回收、禁止权限的语句-grant-revoke-deny-。with-grant-option子句的作用。" tabindex="-1"><a class="header-anchor" href="#_2-掌握用sql授予权限和回收、禁止权限的语句-grant-revoke-deny-。with-grant-option子句的作用。"><span>2. 掌握用SQL授予权限和回收、禁止权限的语句(grant, revoke, deny)。with grant option子句的作用。</span></a></h3><figure><img src="'+l+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><figure><img src="'+t+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><figure><img src="'+i+`" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h3 id="_3-理解常见权限的含义。-例如-insert-on-table-s-update-on-view-a等" tabindex="-1"><a class="header-anchor" href="#_3-理解常见权限的含义。-例如-insert-on-table-s-update-on-view-a等"><span>3. 理解常见权限的含义。（例如 insert on (table) S, update on (view) A等</span></a></h3><ul><li><p>预备概念: 权限</p><ul><li>代表用户能够对某个对象进行某个操作的能力。每一个用户都分配有一组权限，代表他所能够做的操作。</li></ul></li><li><p>存取控制机制的两个方面</p><ul><li>管理用户权限： <ul><li>通过两个SQL语句——GRANT语句授予用户以权限，REVOKE语句回收用户的权限。</li></ul></li><li>检查用户权限： <ul><li>用户要对某个对象进行某个操作时，DBMS首先会检查用户是否被授予了相应的权限，以决定是响应还是拒绝用户请求</li></ul></li></ul></li><li><p>不同用户之间的权限传递</p><ul><li>DBA是最高用户，具有全部权限，并且这些权限不能被回收</li><li>DBA可以把这些权限授予给其它用户，也可以从其它用户那里回收权限</li><li>允许用户把已获得的权限再转授给其他用户，或者回收转授给其他用户的权限</li></ul></li></ul><h3 id="_4-理解完整性的含义-正确、有效、相容。完整性约束-规则-是数据为保证完整性所必须满足的条件。" tabindex="-1"><a class="header-anchor" href="#_4-理解完整性的含义-正确、有效、相容。完整性约束-规则-是数据为保证完整性所必须满足的条件。"><span>4. 理解完整性的含义：正确、有效、相容。完整性约束（规则）是数据为保证完整性所必须满足的条件。</span></a></h3><ul><li>完整性的原义 <ul><li>数据的完整性，指数据的正确性、有效性和相容性</li></ul></li><li>然而大多数情况下，我们所提到的完整性，实际是指完整性规则 <ul><li>为保证完整性，数据应该满足的约束条件</li><li>又称为完整性约束</li></ul></li></ul><h3 id="_5-熟记关系模型中的三类完整性规则。各有什么要求-理解哪些-修改-操作会破坏这些规则" tabindex="-1"><a class="header-anchor" href="#_5-熟记关系模型中的三类完整性规则。各有什么要求-理解哪些-修改-操作会破坏这些规则"><span>5. 熟记关系模型中的三类完整性规则。各有什么要求？理解哪些（修改）操作会破坏这些规则？</span></a></h3><ul><li>完整性又称为关系完整性，是三要素（关系, 关系完整性, 关系操作）之一，包括三种完整性规则</li></ul><ol><li><p>实体完整性；</p><ul><li>规则：元组在主码上取唯一值，且每个属性均不能为空</li><li>要点：如果一个关系的主码由多个属性构成，那么每个属性都不能取空值</li><li>意义：在实体映射为元组后，不同元组靠主码来相互区分。保证每一元组/实体，可与其它元组/实体是可区分的。 <ul><li>删除（无需检查）</li><li>插入 ：如果插入的记录中如果主键值有空或者重复，则违反了规则，拒绝插入，甚至回滚事务</li><li>修改：如果修改的主键值有空或者重复，则拒绝插入，甚至回滚事务</li></ul></li></ul></li><li><p>参照完整性；</p></li></ol><ul><li>定义：关系R1中的单个属性或属性集合，对应另一个关系R2的主码,R1称为参照关系， R2称为被参照关系</li><li>规则：如果关系R的外部码对应关系S的主码，则R每个元组在外部码上的取值必须满足： <ul><li>要么等于空值</li><li>要么等于某个对应的主码值（S某个元组的主码值）</li></ul></li><li>意义：元组/实体的外部码，说明跟另外哪一个元组/实体（的主码）相联系的。保证这一联系有意义，不会联系不存在的元组/实体。</li></ul><ol start="3"><li>用户定义完整性；</li></ol><ul><li>规则：用户根据具体的应用环境定义 <ul><li>例如 <ul><li>年龄的取值范围为0到200，性别只能是“男”或“女”</li><li>职工编号是4位整数</li></ul></li></ul></li><li>意义： <ul><li>保证元组/实体的属性取值合理，反映现实世界的真实情况</li><li>反映了程序编制的要求</li></ul></li></ul><h3 id="_6-掌握用sql定义主码约束、外码约束、非空-not-null-约束、唯一-unique-约束、域约束、检查-check-约束的语句-以及这些约束的含义、作用。" tabindex="-1"><a class="header-anchor" href="#_6-掌握用sql定义主码约束、外码约束、非空-not-null-约束、唯一-unique-约束、域约束、检查-check-约束的语句-以及这些约束的含义、作用。"><span>6. 掌握用SQL定义主码约束、外码约束、非空(not null)约束、唯一(unique)约束、域约束、检查(check)约束的语句？以及这些约束的含义、作用。</span></a></h3><p>定义：在创建或修改关系的定义语句中，用PRIMARY KEY关键字声明主码的同时，即定义了一个主码约束</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span>  <span class="token keyword">table</span>  关系名
<span class="token punctuation">(</span>
    ……
    <span class="token punctuation">[</span> <span class="token punctuation">,</span> <span class="token keyword">primary</span>  <span class="token keyword">key</span> <span class="token punctuation">(</span>属性 {<span class="token punctuation">,</span> 属性}<span class="token punctuation">)</span> <span class="token punctuation">]</span>
    ……

<span class="token punctuation">)</span>
<span class="token keyword">create</span>  <span class="token keyword">table</span>  选修  <span class="token punctuation">(</span>
　　学号  <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
　　课程号  <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

　　……<span class="token punctuation">,</span>
　　<span class="token keyword">primary</span>  <span class="token keyword">key</span>  <span class="token punctuation">(</span>学号<span class="token punctuation">,</span> 课程号<span class="token punctuation">)</span><span class="token punctuation">,</span>
　　……
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义：在创建或修改关系的定义语句中，用FOREIGN KEY关键字声明一个外部码的同时，即定义了一个外部码约束</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> 表名    
<span class="token punctuation">(</span>    
    ……
    { <span class="token punctuation">,</span> <span class="token keyword">foreign</span>  <span class="token keyword">key</span>   <span class="token punctuation">(</span>属性名 {<span class="token punctuation">,</span> 属性名}<span class="token punctuation">)</span>  
　　   　<span class="token keyword">references</span>  关系名 <span class="token punctuation">(</span>属性名 {<span class="token punctuation">,</span> 属性名}<span class="token punctuation">)</span> 
　　　　 <span class="token keyword">on</span>  <span class="token keyword">delete</span>  <span class="token operator">&lt;</span>参照动作<span class="token operator">&gt;</span>
　　　　 <span class="token keyword">on</span>  <span class="token keyword">update</span>  <span class="token operator">&lt;</span>参照动作<span class="token operator">&gt;</span>}
　　　   ……
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>唯一约束 <ul><li>规则：对指定的一个属性或属性组合，不允许出现重复值</li><li>定义：在创建或修改关系的定义语句中，用Unique关键字声明</li></ul></li></ul><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span>  <span class="token keyword">table</span>  关系名
<span class="token punctuation">(</span>
    ……
    <span class="token punctuation">[</span> <span class="token punctuation">,</span> <span class="token keyword">unique</span> <span class="token punctuation">(</span>属性 {<span class="token punctuation">,</span> 属性}<span class="token punctuation">)</span> <span class="token punctuation">]</span>
　   ……
<span class="token punctuation">)</span>

<span class="token keyword">create</span>  <span class="token keyword">table</span>  学生  <span class="token punctuation">(</span>
　　　　　……<span class="token punctuation">,</span>
　　　　　身份证号  <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

　　　　　……<span class="token punctuation">,</span>
　　　　　<span class="token keyword">unique</span>  <span class="token punctuation">(</span>身份证号<span class="token punctuation">)</span><span class="token punctuation">,</span>
　　　　　……
　　　<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>非空约束 <ul><li>规则：属性值不允许取空值</li><li>定义：在定义关系的语句中，声明某个属性不能取空值（not null），即定义了一个非空约束</li></ul></li></ul><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>　　　<span class="token keyword">create</span>  <span class="token keyword">table</span>   关系名
           <span class="token punctuation">(</span>
　　　　　……<span class="token punctuation">,</span>
　　　　　属性名  域  <span class="token punctuation">[</span><span class="token keyword">default</span>  缺省值<span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">]</span>
　　　　　……<span class="token punctuation">,</span>
　　　<span class="token punctuation">)</span>

<span class="token keyword">create</span>  <span class="token keyword">table</span>  学生 <span class="token punctuation">(</span>
　　　　　……<span class="token punctuation">,</span>
　　　　　姓名  <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>  <span class="token operator">not</span>  <span class="token boolean">null</span><span class="token punctuation">,</span>
　　　　　……<span class="token punctuation">,</span>
　　　<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>域约束 <ul><li>规则：域中的值要满足用户指定的条件</li><li>目的：间接地约束属性。因为如果把某个属性声明为这个域（数据类型），则该属性的取值也必须满足这一条件</li><li>定义：在创建域的语句中，用constraint子句说明约束的名称和条件</li></ul></li></ul><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>　　　<span class="token keyword">create</span>  domain   用户域名   预定义域  
　　　　　<span class="token punctuation">[</span> <span class="token keyword">constraint</span>  约束名  <span class="token keyword">check</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span> <span class="token punctuation">]</span>

<span class="token keyword">create</span>  domain  Age_Domain  <span class="token keyword">SMALLINT</span>  
　　　　　 <span class="token keyword">constraint</span>   Age_Constraint
　　　　　 <span class="token keyword">check</span> <span class="token punctuation">(</span><span class="token keyword">value</span><span class="token operator">&gt;=</span><span class="token number">0</span>  <span class="token operator">AND</span>  <span class="token keyword">value</span><span class="token operator">&lt;=</span><span class="token number">200</span><span class="token punctuation">)</span>

　　　<span class="token keyword">create</span>  <span class="token keyword">table</span>  学生<span class="token punctuation">(</span>
　　　　　学号  <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
　　　　　姓名  <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
　　　　　年龄  Age_Domain<span class="token punctuation">,</span>
　　　　　<span class="token keyword">primary</span>  <span class="token keyword">key</span>  <span class="token punctuation">(</span>学号<span class="token punctuation">)</span><span class="token punctuation">,</span>
　　　　　……
　　　<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>检查约束 <ul><li>规则：关系中每一个元组的各个属性值间，必须满足用户指定的条件</li><li>定义：在创建或者修改关系的语句中，用check子句声明检查约束</li></ul></li></ul><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>　　　<span class="token keyword">create</span>  <span class="token keyword">table</span>   关系名       <span class="token punctuation">(</span>
　　　　　……<span class="token punctuation">,</span>
　　　　　……<span class="token punctuation">,</span>
　　　　　<span class="token punctuation">[</span> <span class="token punctuation">,</span> <span class="token keyword">check</span>  <span class="token punctuation">(</span>条件<span class="token punctuation">)</span> <span class="token punctuation">]</span> 
　　　<span class="token punctuation">)</span>

<span class="token keyword">create</span>  <span class="token keyword">table</span>  CET4 
<span class="token punctuation">(</span>
    sno     <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    grade  <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    result  <span class="token keyword">FLOAT</span><span class="token punctuation">,</span>
    <span class="token keyword">primary</span>  <span class="token keyword">key</span>  <span class="token punctuation">(</span>sno<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">check</span> <span class="token punctuation">(</span>
        <span class="token punctuation">(</span>grade<span class="token operator">=</span>“及格”  <span class="token operator">and</span> result <span class="token operator">between</span> <span class="token number">420</span> <span class="token operator">and</span> <span class="token number">710</span><span class="token punctuation">)</span> <span class="token operator">or</span>
        <span class="token punctuation">(</span>grade<span class="token operator">=</span>“不及格” <span class="token operator">and</span> result <span class="token operator">between</span> <span class="token number">0</span> <span class="token operator">and</span> <span class="token number">419</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-在定义外部码约束时-有哪几种参照动作-代表什么意义" tabindex="-1"><a class="header-anchor" href="#_7-在定义外部码约束时-有哪几种参照动作-代表什么意义"><span>7. 在定义外部码约束时，有哪几种参照动作？代表什么意义？</span></a></h3><ul><li>说明当某个主码值被删除/更新时（这个主码值在被参照关系中），如何处理对应的外部码值（这些外部码值在参照关系中） <ul><li>RESTRICT 方式：仅当没有任何对应的外码值时，才可以删除/更新这个主码值，否则系统拒绝执行此操作</li><li>CASCADE 方式：连带将所有对应的外码值一块删除/更新（删除外码值，实际上就是将所在的元组删除掉）</li><li>SET NULL 方式：将所有对应的外码值设为空值</li></ul></li></ul><figure><img src="`+p+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h3 id="_8-断言不作要求" tabindex="-1"><a class="header-anchor" href="#_8-断言不作要求"><span>8. 断言不作要求</span></a></h3><h3 id="_9-熟记以下全部-触发器的概念。触发器有哪些作用-触发器-eca规则构成的三个方面-包括英文单词。哪些事件会激活-insert-update-delete操作-。" tabindex="-1"><a class="header-anchor" href="#_9-熟记以下全部-触发器的概念。触发器有哪些作用-触发器-eca规则构成的三个方面-包括英文单词。哪些事件会激活-insert-update-delete操作-。"><span>9. 熟记以下全部 触发器的概念。触发器有哪些作用？触发器/ECA规则构成的三个方面，包括英文单词。哪些事件会激活（INSERT,UPDATE,DELETE操作）。</span></a></h3><ul><li><p>触发器</p><ul><li>概念：一种“自动执行”的过程。</li><li>构成 <ul><li>事件：说明什么时候激活（执行）触发器</li><li>例如：Insert、Update、Delete等</li></ul></li><li>条件：说明满足什么条件时，才执行下面的动作 <ul><li>例如：年龄&gt;1000</li></ul></li><li>动作：说明（条件成立后）要执行的代码 <ul><li>例如：报警</li></ul></li></ul></li><li><p>作用</p><ul><li>保证数据完整性</li><li>审计。例如，追踪一个用户访问数据库的时间。</li><li>满足特定条件时自动执行某项任务。例如，库存不足时，自动生成一张订单</li></ul></li></ul><figure><img src="'+o+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><ul><li><p>事件（Event）: 触发器响应的数据库操作，可以是以下几种：</p><ul><li>INSERT: 当一条新记录被插入到表中时触发。</li><li>UPDATE: 当表中的一条记录被修改时触发。</li><li>DELETE: 当表中的一条记录被删除时触发。</li></ul></li><li><p>条件（Condition）: 触发器在事件发生后检查的布尔表达式。只有当条件为真时，动作才会被执行。如果没有条件，动作将在事件发生时总是被执行。</p></li><li><p>动作（Action）: 触发器在条件为真时执行的操作。动作可以是SQL语句或一系列的SQL语句，如插入数据、更新数据、删除数据或调用存储过程。</p></li></ul><h3 id="_10-安全性控制" tabindex="-1"><a class="header-anchor" href="#_10-安全性控制"><span>10. 安全性控制</span></a></h3><ul><li>安全性控制 <ul><li>目的：保证数据库的任何部分都不会受到未授权（未经许可）的访问和修改，防止数据泄露和被破坏</li></ul></li><li>两类安全性问题和解决机制 <ul><li>非法用户 <ul><li>“非授权的使用”：未经许可的用户进入和使用数据库。</li><li>解决这一问题的方法为系统保护机制，即设置用户帐号和密码</li></ul></li><li>非法操作 <ul><li>“非授权的存取”：经过许可的用户进入数据库系统后，对某些数据进行了未经许可的操作。</li><li>解决这一问题的的方法称为存取控制机制</li></ul></li></ul></li></ul>',39),r=[u];function d(k,v){return a(),s("div",null,r)}const g=n(c,[["render",d],["__file","chapter6.html.vue"]]),h=JSON.parse('{"path":"/MD/School/DatabaseSystem/chapter6.html","title":"期末复习第六章","lang":"zh-CN","frontmatter":{"title":"期末复习第六章","tag":"数据库","description":"1、安全性定义 安全性是防止非法用户进入数据库，以及合法用户进入数据库后做了（未授权的）非法操作。 完整性是防止非法数据进入数据库，即使是合法用户及合法操作产生的。 目的：防止非法、不合语义的数据被输入和输出，即所谓的“垃圾进垃圾出”（Garbage In Garbage Out） 2. 掌握用SQL授予权限和回收、禁止权限的语句(grant, rev...","head":[["meta",{"property":"og:url","content":"https://www.wataminc.top/MD/School/DatabaseSystem/chapter6.html"}],["meta",{"property":"og:site_name","content":"Watamin C"}],["meta",{"property":"og:title","content":"期末复习第六章"}],["meta",{"property":"og:description","content":"1、安全性定义 安全性是防止非法用户进入数据库，以及合法用户进入数据库后做了（未授权的）非法操作。 完整性是防止非法数据进入数据库，即使是合法用户及合法操作产生的。 目的：防止非法、不合语义的数据被输入和输出，即所谓的“垃圾进垃圾出”（Garbage In Garbage Out） 2. 掌握用SQL授予权限和回收、禁止权限的语句(grant, rev..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-02T01:45:18.000Z"}],["meta",{"property":"article:author","content":"Watamin C"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:modified_time","content":"2024-07-02T01:45:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"期末复习第六章\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-02T01:45:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Watamin C\\",\\"url\\":\\"www.wataminc.top\\"}]}"]]},"headers":[{"level":3,"title":"1、安全性定义","slug":"_1、安全性定义","link":"#_1、安全性定义","children":[]},{"level":3,"title":"2. 掌握用SQL授予权限和回收、禁止权限的语句(grant, revoke, deny)。with grant option子句的作用。","slug":"_2-掌握用sql授予权限和回收、禁止权限的语句-grant-revoke-deny-。with-grant-option子句的作用。","link":"#_2-掌握用sql授予权限和回收、禁止权限的语句-grant-revoke-deny-。with-grant-option子句的作用。","children":[]},{"level":3,"title":"3. 理解常见权限的含义。（例如 insert on (table) S, update on (view) A等","slug":"_3-理解常见权限的含义。-例如-insert-on-table-s-update-on-view-a等","link":"#_3-理解常见权限的含义。-例如-insert-on-table-s-update-on-view-a等","children":[]},{"level":3,"title":"4. 理解完整性的含义：正确、有效、相容。完整性约束（规则）是数据为保证完整性所必须满足的条件。","slug":"_4-理解完整性的含义-正确、有效、相容。完整性约束-规则-是数据为保证完整性所必须满足的条件。","link":"#_4-理解完整性的含义-正确、有效、相容。完整性约束-规则-是数据为保证完整性所必须满足的条件。","children":[]},{"level":3,"title":"5. 熟记关系模型中的三类完整性规则。各有什么要求？理解哪些（修改）操作会破坏这些规则？","slug":"_5-熟记关系模型中的三类完整性规则。各有什么要求-理解哪些-修改-操作会破坏这些规则","link":"#_5-熟记关系模型中的三类完整性规则。各有什么要求-理解哪些-修改-操作会破坏这些规则","children":[]},{"level":3,"title":"6. 掌握用SQL定义主码约束、外码约束、非空(not null)约束、唯一(unique)约束、域约束、检查(check)约束的语句？以及这些约束的含义、作用。","slug":"_6-掌握用sql定义主码约束、外码约束、非空-not-null-约束、唯一-unique-约束、域约束、检查-check-约束的语句-以及这些约束的含义、作用。","link":"#_6-掌握用sql定义主码约束、外码约束、非空-not-null-约束、唯一-unique-约束、域约束、检查-check-约束的语句-以及这些约束的含义、作用。","children":[]},{"level":3,"title":"7. 在定义外部码约束时，有哪几种参照动作？代表什么意义？","slug":"_7-在定义外部码约束时-有哪几种参照动作-代表什么意义","link":"#_7-在定义外部码约束时-有哪几种参照动作-代表什么意义","children":[]},{"level":3,"title":"8. 断言不作要求","slug":"_8-断言不作要求","link":"#_8-断言不作要求","children":[]},{"level":3,"title":"9. 熟记以下全部 触发器的概念。触发器有哪些作用？触发器/ECA规则构成的三个方面，包括英文单词。哪些事件会激活（INSERT,UPDATE,DELETE操作）。","slug":"_9-熟记以下全部-触发器的概念。触发器有哪些作用-触发器-eca规则构成的三个方面-包括英文单词。哪些事件会激活-insert-update-delete操作-。","link":"#_9-熟记以下全部-触发器的概念。触发器有哪些作用-触发器-eca规则构成的三个方面-包括英文单词。哪些事件会激活-insert-update-delete操作-。","children":[]},{"level":3,"title":"10. 安全性控制","slug":"_10-安全性控制","link":"#_10-安全性控制","children":[]}],"git":{"createdTime":1719884718000,"updatedTime":1719884718000,"contributors":[{"name":"WataminC","email":"1286982501@qq.com","commits":1}]},"readingTime":{"minutes":7.83,"words":2349},"filePathRelative":"MD/School/DatabaseSystem/chapter6.md","localizedDate":"2024年7月2日","excerpt":"<h3>1、安全性定义</h3>\\n<ul>\\n<li>安全性是防止非法用户进入数据库，以及合法用户进入数据库后做了（未授权的）非法操作。</li>\\n<li>完整性是防止非法数据进入数据库，即使是合法用户及合法操作产生的。\\n<ul>\\n<li>目的：防止非法、不合语义的数据被输入和输出，即所谓的“垃圾进垃圾出”（Garbage In Garbage Out）</li>\\n</ul>\\n</li>\\n</ul>\\n<h3>2. 掌握用SQL授予权限和回收、禁止权限的语句(grant, revoke, deny)。with grant option子句的作用。</h3>\\n<figure><figcaption>alt text</figcaption></figure>","autoDesc":true}');export{g as comp,h as data};
