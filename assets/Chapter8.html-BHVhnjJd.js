import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as e,a as n,e as s,f as a}from"./app-t2brmSFJ.js";const o={},c=n("h1",{id:"第8章-图",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#第8章-图"},[n("span",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",{mathvariant:"normal"},"§")]),n("annotation",{encoding:"application/x-tex"},"\\S")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord"},"§")])])]),s(" 第8章 图")])])],-1),l=n("h3",{id:"_8-1-图的基本概念",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_8-1-图的基本概念"},[n("span",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",{mathvariant:"normal"},"§")]),n("annotation",{encoding:"application/x-tex"},"\\S")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord"},"§")])])]),s(" 8.1 图的基本概念")])])],-1),i=n("p",null,[n("strong",null,"图定义:"),s(" 图是由顶点集合(vertex)及顶点间的关系集合组成的一种数据结构")],-1),u=n("ul",null,[n("li",null,"有向图和无向图"),n("li",null,"完全图"),n("li",null,"邻接顶点"),n("li",null,"子图"),n("li",null,"带权图也叫做网络"),n("li",null,[s("稠密图和稀疏图 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"m"),n("mo",null,"="),n("mi",null,"n"),n("mi",null,"log"),n("mo",null,"⁡"),n("mi",null,"n")]),n("annotation",{encoding:"application/x-tex"},"m = n\\log n")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mop"},[s("lo"),n("span",{style:{"margin-right":"0.01389em"}},"g")]),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal"},"n")])])])]),n("li",null,"顶点的度"),n("li",null,"入度"),n("li",null,"出度"),n("li",null,"路径"),n("li",null,"路径长度"),n("li",null,"简单路径"),n("li",null,"回路"),n("li",null,"连通图和连通分量"),n("li",null,"强连通图与强连通分量"),n("li",null,"生成树")],-1),k=a(`<hr><p><strong>图的抽象数据类型</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">{</span>
<span class="token comment">//对象: 由一个顶点的非空集合和一个边集合构成</span>
<span class="token comment">//每条边由一个顶点对来表示。</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Graph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//建立一个空的图</span>
    <span class="token keyword">void</span> <span class="token function">insertVertex</span> <span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//插入一个顶点vertex, 该顶点暂时没有入边</span>
    <span class="token keyword">void</span> <span class="token function">insertEdge</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">,</span> <span class="token keyword">int</span> weight<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//在图中插入一条边(v1, v2, w)</span>
    <span class="token keyword">void</span> <span class="token function">removeVertex</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//在图中删除顶点v和所有关联到它的边void removeEdge (int v1, int v2);</span>
    <span class="token comment">//在图中删去边(v1,v2)</span>
    <span class="token keyword">bool</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//若图中没有顶点, 则返回true, 否则返回false</span>
    T <span class="token function">getWeight</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//函数返回边 (v1,v2) 的权值</span>
    <span class="token keyword">int</span> <span class="token function">getFirstNeighbor</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//给出顶点 v 第一个邻接顶点的位置</span>
    <span class="token keyword">int</span> <span class="token function">getNextNeighbor</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//给出顶点 v 的某邻接顶点 w 的下一个邻接顶点</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>图的模版基类</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> <span class="token keyword">int</span> maxWeight <span class="token operator">=</span> ……<span class="token punctuation">;</span>
<span class="token comment">//无穷大的值</span>
<span class="token punctuation">(</span><span class="token operator">=</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> DefaultVertices <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
<span class="token comment">//最大顶点数</span>
<span class="token punctuation">(</span><span class="token operator">=</span>n<span class="token punctuation">)</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">E</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">{</span>   <span class="token comment">//图的类定义</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
    <span class="token keyword">int</span> maxVertices<span class="token punctuation">;</span>    <span class="token comment">//图中最大顶点数</span>
    <span class="token keyword">int</span> numEdges<span class="token punctuation">;</span>   <span class="token comment">//当前边数</span>
    <span class="token keyword">int</span> numVertices<span class="token punctuation">;</span>    <span class="token comment">//当前顶点数</span>
    <span class="token keyword">int</span> <span class="token function">getVertexPos</span> <span class="token punctuation">(</span>T vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//给出顶点vertex在图中位置</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Graph</span> <span class="token punctuation">(</span><span class="token keyword">int</span> sz <span class="token operator">=</span> DefaultVertices<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//构造函数</span>
    ～<span class="token function">Graph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//析构函数</span>
    <span class="token keyword">bool</span> <span class="token function">GraphEmpty</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token comment">//判图空否</span>
    <span class="token punctuation">{</span> <span class="token keyword">return</span> numEdges <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">NumberOfVertices</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> numVertices<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">//返回当前顶点数</span>
    <span class="token keyword">int</span> <span class="token function">NumberOfEdges</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> numEdges<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token comment">//返回当前边数</span>
    <span class="token keyword">virtual</span> T <span class="token function">getValue</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//取顶点 i 的值</span>
    <span class="token keyword">virtual</span> E <span class="token function">getWeight</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//取边上权值</span>
    <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">getFirstNeighbor</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//取顶点 v 的第一个邻接顶点</span>
    <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">getNextNeighbor</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//取邻接顶点 w 的下一邻接顶点</span>
    <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">insertVertex</span> <span class="token punctuation">(</span><span class="token keyword">const</span> T vertex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//插入一个顶点vertex</span>
    <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">insertEdge</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">,</span> E cost<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//插入边(v1,v2), 权为cost</span>
    <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">removeVertex</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//删去顶点 v 和所有与相关联边</span>
    <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">removeEdge</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//在图中删去边(v1,v2)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,6),r=n("h3",{id:"_8-2-图的存储表示",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_8-2-图的存储表示"},[n("span",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",{mathvariant:"normal"},"§")]),n("annotation",{encoding:"application/x-tex"},"\\S")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord"},"§")])])]),s(" 8.2 图的存储表示")])])],-1),d=a(`<p><strong>邻接矩阵存储图的类定义</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">E</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">Graphmtx</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Graph</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">friend</span> istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span> istream<span class="token operator">&amp;</span> in<span class="token punctuation">,</span>Graphmtx<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">&gt;</span><span class="token operator">&amp;</span> G<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//输入</span>
    <span class="token keyword">friend</span> ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span>out<span class="token punctuation">,</span> Graphmtx<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">&gt;</span><span class="token operator">&amp;</span> G<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//输出</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    T <span class="token operator">*</span>VerticesList<span class="token punctuation">;</span>    <span class="token comment">//顶点表</span>
    E <span class="token operator">*</span><span class="token operator">*</span>Edge<span class="token punctuation">;</span>   <span class="token comment">//邻接矩阵</span>
    <span class="token keyword">int</span> <span class="token function">getVertexPos</span> <span class="token punctuation">(</span>T vertex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//给出顶点vertex在图中的位置</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numVertices<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>VerticesList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> Vertex<span class="token punctuation">)</span> 
                <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Graphmtx</span> <span class="token punctuation">(</span><span class="token keyword">int</span> sz <span class="token operator">=</span> DefaultVertices<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//构造函数</span>
    ～<span class="token function">Graphmtx</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//析构函数</span>
    <span class="token punctuation">{</span> <span class="token keyword">delete</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>VerticesList<span class="token punctuation">;</span> <span class="token keyword">delete</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>Edge<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    T <span class="token function">getValue</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//取顶点 i 的值, i 不合理返回0</span>
        <span class="token keyword">return</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> numVertices <span class="token operator">?</span> VerticesList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    E <span class="token function">getWeight</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//取边(v1,v2)上权值</span>
        <span class="token keyword">return</span> v1 <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> v2 <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> Edge<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">getFirstNeighbor</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//取顶点 v 的第一个邻接顶点</span>
    <span class="token keyword">int</span> <span class="token function">getNextNeighbor</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//取 v 的邻接顶点 w 的下一邻接顶点</span>
    <span class="token keyword">bool</span> <span class="token function">insertVertex</span> <span class="token punctuation">(</span><span class="token keyword">const</span> T vertex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//插入顶点vertex</span>
    <span class="token keyword">bool</span> <span class="token function">insertEdge</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">,</span> E cost<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//插入边(v1, v2),权值为cost</span>
    <span class="token keyword">bool</span> <span class="token function">removeVertex</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//删去顶点 v 和所有与它相关联的边</span>
    <span class="token keyword">bool</span> <span class="token function">removeEdge</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//在图中删去边(v1,v2)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>构造函数</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">E</span><span class="token operator">&gt;</span>
<span class="token class-name">Graphmtx</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">Graphmtx</span> <span class="token punctuation">(</span><span class="token keyword">int</span> sz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//构造函数</span>
    maxVertices <span class="token operator">=</span> sz<span class="token punctuation">;</span>
    numVertices <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
    numEdges <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
    VerticesList <span class="token operator">=</span> <span class="token keyword">new</span> T<span class="token punctuation">[</span>maxVertices<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//创建顶点表</span>
    Edge <span class="token operator">=</span> <span class="token punctuation">(</span>E <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">new</span> E <span class="token operator">*</span><span class="token punctuation">[</span>maxVertices<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxVertices<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>maxVertices<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//邻接矩阵</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxVertices<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token comment">//矩阵初始化</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> maxVertices<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
            Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span> ？ <span class="token number">0</span> <span class="token operator">:</span> maxWeight<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>邻接表存储图的类定义</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">E</span><span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">Edge</span> <span class="token punctuation">{</span>   <span class="token comment">//边结点的定义</span>
    <span class="token keyword">int</span> dest<span class="token punctuation">;</span>   <span class="token comment">//边的另一顶点位置</span>
    E cost<span class="token punctuation">;</span> <span class="token comment">//边上的权值</span>
    Edge<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">&gt;</span> <span class="token operator">*</span>link<span class="token punctuation">;</span>   <span class="token comment">//下一条边链指针</span>
    <span class="token function">Edge</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">//构造函数</span>
    <span class="token function">Edge</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> E weight<span class="token punctuation">)</span>    <span class="token comment">//构造函数</span>
    <span class="token operator">:</span> <span class="token function">dest</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cost</span><span class="token punctuation">(</span>weight<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">link</span> <span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>Edge<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">&gt;</span><span class="token operator">&amp;</span> R<span class="token punctuation">)</span> <span class="token keyword">const</span>
    <span class="token punctuation">{</span> <span class="token keyword">return</span> dest <span class="token operator">!=</span> R<span class="token punctuation">.</span>dest<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">//判边等否</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>顺序表结点结构类</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">E</span><span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">Vertex</span> <span class="token punctuation">{</span> <span class="token comment">//顶点的定义</span>
    T data<span class="token punctuation">;</span> <span class="token comment">//顶点的名字</span>
    Edge<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">&gt;</span> <span class="token operator">*</span>adj<span class="token punctuation">;</span>    <span class="token comment">//边链表的头指针</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>邻接表类</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>邻接表类
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">E</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">Graphlnk</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Graph</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span> <span class="token comment">//图的类定义</span>
    <span class="token keyword">friend</span> istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span>istream<span class="token operator">&amp;</span> in<span class="token punctuation">,</span> Graphlnk<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">&gt;</span><span class="token operator">&amp;</span> G<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输入</span>
    <span class="token keyword">friend</span> ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> out<span class="token punctuation">,</span> Graphlnk<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">&gt;</span><span class="token operator">&amp;</span> G<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出private:</span>
    Vertex<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">&gt;</span> <span class="token operator">*</span>NodeTable<span class="token punctuation">;</span>    <span class="token comment">//顶点表 (各边链表的头结点)</span>
    <span class="token keyword">int</span> <span class="token function">getVertexPos</span> <span class="token punctuation">(</span><span class="token keyword">const</span> T vertx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//给出顶点vertex在图中的位置</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numVertices<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>NodeTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">==</span> vertx<span class="token punctuation">)</span> 
                <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Graphlnk</span> <span class="token punctuation">(</span><span class="token keyword">int</span> sz <span class="token operator">=</span> DefaultVertices<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//构造函数</span>
    <span class="token operator">~</span><span class="token function">Graphlnk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//析构函数</span>
    T <span class="token function">getValue</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//取顶点 i 的值</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> NumVertices<span class="token punctuation">)</span> <span class="token operator">?</span> NodeTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    E <span class="token function">getWeight</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//取边(v1,v2)权值</span>
    <span class="token keyword">bool</span> <span class="token function">insertVertex</span> <span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> vertex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 插入顶点</span>
    <span class="token keyword">bool</span> <span class="token function">removeVertex</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除顶点</span>
    <span class="token keyword">bool</span> <span class="token function">insertEdge</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">,</span> E cost<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//插入边</span>
    <span class="token keyword">bool</span> <span class="token function">removeEdge</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除边</span>
    <span class="token keyword">int</span> <span class="token function">getFirstNeighbor</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取v的第一个邻接点</span>
    <span class="token keyword">int</span> <span class="token function">getNextNeighbor</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取w后的邻接点</span>
    <span class="token keyword">void</span> <span class="token function">CreateNodeTable</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 建立邻接表结构</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>构造函数</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">E</span><span class="token operator">&gt;</span>
<span class="token class-name">Graphlnk</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">Graphlnk</span> <span class="token punctuation">(</span><span class="token keyword">int</span> sz<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//构造函数：建立一个空的邻接表</span>
    maxVertices <span class="token operator">=</span> sz<span class="token punctuation">;</span>
    numVertices <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
    numEdges <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    NodeTable<span class="token operator">=</span><span class="token keyword">new</span> Vertex<span class="token operator">&lt;</span>T<span class="token punctuation">,</span>E<span class="token operator">&gt;</span><span class="token punctuation">[</span>maxVertices<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//创建顶点表数组</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>NodeTable <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span> cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;存储分配错！&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxVertices<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        NodeTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>析构函数</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">E</span><span class="token operator">&gt;</span>
Graphlnk<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>～<span class="token function">Graphlnk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//析构函数：删除一个邻接表</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numVertices<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Edge<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">&gt;</span> <span class="token operator">*</span>p <span class="token operator">=</span> NodeTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>adj<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span> 
            NodeTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> p<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>
            <span class="token keyword">delete</span> p<span class="token punctuation">;</span> 
            p <span class="token operator">=</span> NodeTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>adj<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>NodeTable<span class="token punctuation">;</span>
    <span class="token comment">//删除顶点表数组</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>邻接表的建立算法</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">E</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token class-name">Graphlnk</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">CreateNodeTable</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token comment">// 建立邻接表结构</span>
<span class="token punctuation">{</span> 
    <span class="token keyword">int</span> n<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>m<span class="token punctuation">;</span>
    Edge<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">&gt;</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span> <span class="token comment">//结点个数</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        NodeTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>adj<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 预设为空链</span>
        cin<span class="token operator">&gt;&gt;</span>NodeTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span> <span class="token comment">//输入结点值</span>
        cin<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span> <span class="token comment">//每个结点的邻接点个数</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span> 
            p <span class="token operator">=</span> <span class="token keyword">new</span> Edge<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">&gt;</span> <span class="token punctuation">;</span> <span class="token comment">// 生成一个新结点</span>
            cin<span class="token operator">&gt;&gt;</span>p<span class="token operator">-&gt;</span>dest<span class="token punctuation">;</span>   <span class="token comment">//建立边结点, 输入结点值到dest域</span>
            cin<span class="token operator">&gt;&gt;</span>p<span class="token operator">-&gt;</span>cost<span class="token punctuation">;</span>  <span class="token comment">//带权图则多加一个权值的输入 </span>
            p<span class="token operator">-&gt;</span>link <span class="token operator">=</span> NodeTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>adj<span class="token punctuation">;</span>
            NodeTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> p<span class="token punctuation">;</span>   <span class="token comment">//头插入建链</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,18),m=n("h3",{id:"_8-3-图的遍历",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_8-3-图的遍历"},[n("span",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",{mathvariant:"normal"},"§")]),n("annotation",{encoding:"application/x-tex"},"\\S")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord"},"§")])])]),s(" 8.3 图的遍历")])])],-1),v=a(`<ul><li>DFS</li><li>BFS</li><li>层次遍历</li></ul><p><strong>DFS</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cout<span class="token operator">&lt;&lt;</span>NodeTable<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token comment">//访问v结点</span>
    p<span class="token operator">=</span>NodeTable<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>adj<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment">// 找出孩子逐个进行递归调用</span>
    <span class="token punctuation">{</span>
        <span class="token function">DFS</span><span class="token punctuation">(</span> p<span class="token operator">-&gt;</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span><span class="token comment">//下一个孩子</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token comment">// DFS</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>层次遍历算法</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">BFS</span><span class="token punctuation">(</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span> 
    <span class="token keyword">int</span> v<span class="token punctuation">;</span>
    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> qu<span class="token punctuation">;</span> <span class="token comment">//定义一个队列qu</span>
    v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 根结点的下标为0</span>
    qu<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// v入列</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>qu<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span> 
        v<span class="token operator">=</span>qu<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 
        qu<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//出列</span>
        cout<span class="token operator">&lt;&lt;</span>NodeTable<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span> <span class="token comment">//访问v结点</span>
        p<span class="token operator">=</span>NodeTable<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>adj<span class="token punctuation">;</span> <span class="token comment">//p指向v结点对应邻接单链表的链头</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span> <span class="token comment">//依次将v结点的孩子入列,以依次实施层次遍历</span>
            qu<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>
            p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span><span class="token comment">//下一个孩子</span>
        <span class="token punctuation">}</span> <span class="token comment">//while</span>
    <span class="token punctuation">}</span> <span class="token comment">//while</span>
<span class="token punctuation">}</span> <span class="token comment">// BFS</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在邻接表存储结构下的实现算法</strong>:</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">Graphlnk</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span> <span class="token function">DFS</span><span class="token punctuation">(</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token comment">// 私有函数</span>
<span class="token punctuation">{</span> 
    <span class="token comment">// 从顶点v出发，深度优先遍历遍历连通图 G</span>
    visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>NodeTable<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token comment">//访问v结点</span>
    p<span class="token operator">=</span>NodeTable<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>adj<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment">// 找出邻接点逐个进行递归调用</span>
    <span class="token punctuation">{</span> 
        <span class="token comment">// 对v的尚未访问的邻接顶点递归调用DFS</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>p<span class="token operator">-&gt;</span>dest<span class="token punctuation">]</span><span class="token punctuation">)</span> 
            <span class="token function">DFS</span><span class="token punctuation">(</span> p<span class="token operator">-&gt;</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span> <span class="token comment">// 下一个邻接点</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token comment">// DFS</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在邻接表存储结构下的实现算法</strong>: // STL queue</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">Graphlnk</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span> <span class="token function">BFS</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token comment">// 从顶点v出发，广度优先遍历遍历连通图 G</span>
<span class="token punctuation">{</span> 
    <span class="token keyword">int</span> v<span class="token punctuation">;</span>
    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> qu<span class="token punctuation">;</span> <span class="token comment">//定义一个队列qu</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span> <span class="token punctuation">)</span> 
        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//设臵未入列标志</span>
    cin<span class="token operator">&gt;&gt;</span>v<span class="token punctuation">;</span> <span class="token comment">//输入广度优先遍历的出发点</span>
    qu<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// v入列</span>
    visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 设臵入列标志</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>qu<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span> 
        v<span class="token operator">=</span>qu<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 
        qu<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//出列</span>
        cout <span class="token operator">&lt;&lt;</span> NodeTable<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span> <span class="token comment">//访问v结点</span>
        p<span class="token operator">=</span>NodeTable<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>adj<span class="token punctuation">;</span> <span class="token comment">//p指向v结点对应邻接单链表的链头</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span> <span class="token comment">//依次将v结点的邻接点入列,以依次实施层次遍历</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>p<span class="token operator">-&gt;</span>dest<span class="token punctuation">]</span><span class="token punctuation">)</span> 
                qu<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 没有进过队列的</span>
            p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span><span class="token comment">//下一个邻接点</span>
        <span class="token punctuation">}</span> <span class="token comment">//while</span>
    <span class="token punctuation">}</span> <span class="token comment">//while</span>
<span class="token punctuation">}</span> <span class="token comment">// BFS</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,10),b=n("h3",{id:"_8-4-最小生成树",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_8-4-最小生成树"},[n("span",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",{mathvariant:"normal"},"§")]),n("annotation",{encoding:"application/x-tex"},"\\S")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord"},"§")])])]),s(" 8.4 最小生成树")])])],-1),w=a(`<p><strong>克鲁斯卡尔(Kruskal)算法</strong></p><ol><li>先构造一个只含 n 个顶点的子图 SG;</li><li>然后从权值最小的边开始，若它的添加不使SG中产生回路，则在 SG 上加上这条边</li><li>反复执行第2步，直至加上 n-1 条边为止。</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">E</span><span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">MSTEdgeNode</span> <span class="token comment">//树边结点的类定义</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> tail<span class="token punctuation">,</span> head<span class="token punctuation">;</span> <span class="token comment">//两顶点位臵</span>
    E cost<span class="token punctuation">;</span> <span class="token comment">// 关系比较&lt;的重载</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
MinHeap <span class="token operator">&lt;</span>MSTEdgeNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">&gt;&gt;</span> <span class="token function">H</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//最小堆</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span>u <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> u <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> u<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 图采用邻接矩阵</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>v <span class="token operator">=</span> u<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> Edge<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">&lt;</span>maxWeight<span class="token punctuation">)</span>
        <span class="token punctuation">{</span> 
            ed<span class="token punctuation">.</span>tail <span class="token operator">=</span> u<span class="token punctuation">;</span> 
            ed<span class="token punctuation">.</span>head <span class="token operator">=</span> v<span class="token punctuation">;</span>
            ed<span class="token punctuation">.</span>cost <span class="token operator">=</span> Edge<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">//插入堆</span>
            H<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>ed<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//最小生成树边数计数</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//反复执行, 取n-1条边</span>
    H<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>ed<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//从堆中取权值最小的边</span>
    <span class="token comment">//检查该边的两个顶点是否在同一集合中</span>
    <span class="token comment">//查找出该两顶点所在集合的根u与v—并查集</span>
    u <span class="token operator">=</span> F<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>ed<span class="token punctuation">.</span>tail<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    v <span class="token operator">=</span> F<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>ed<span class="token punctuation">.</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">!=</span> v<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//不是同一集合,不连通</span>
        F<span class="token punctuation">.</span><span class="token function">Union</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//集合合并,连通它们—并查集</span>
        MST<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>ed<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将该边放入生成树MST中</span>
        cout <span class="token operator">&lt;&lt;</span>ed<span class="token punctuation">.</span>tail<span class="token operator">&lt;&lt;</span>ed<span class="token punctuation">.</span>head<span class="token operator">&lt;&lt;</span>ed<span class="token punctuation">.</span>cost <span class="token comment">// 输出边</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>普里姆(prim)算法</strong></p><ol><li>设定其中一个结点为出发点；</li><li>分组:出发点为第一组，其余结点为第二组。</li><li>在一端属于第一组和另一端属于第二组的边中选择一条权值最小的一条。</li><li>把原属于第二组的结点放入第一组中。</li><li>反复2，3两步，直到第二组为空为止。</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">E</span><span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">MSTEdgeNode</span> <span class="token comment">//树边结点的类定义</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> head<span class="token punctuation">;</span> <span class="token comment">//未加入生成树的结点编号</span>
    <span class="token keyword">int</span> tail<span class="token punctuation">;</span> <span class="token comment">//已加入生成树的结点编号</span>
    E cost<span class="token punctuation">;</span> <span class="token comment">// 关系比较&lt;的重载</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

MinHeap <span class="token operator">&lt;</span>MSTEdgeNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">&gt;&gt;</span> <span class="token function">H</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//最小堆</span>

Edge<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">//u 加入生成树</span>
count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 记录已加入生成树的边数</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token operator">&lt;</span>n<span class="token punctuation">)</span>
<span class="token punctuation">{</span> 
    <span class="token keyword">for</span> <span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>v<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 逐个查看v是否在生成树中</span>
    <span class="token punctuation">{</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Edge<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>Edge<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">&lt;</span>maxWeight<span class="token punctuation">)</span>
        <span class="token punctuation">{</span> 
            ed<span class="token punctuation">.</span>tail<span class="token operator">=</span>u<span class="token punctuation">;</span> 
            ed<span class="token punctuation">.</span>head <span class="token operator">=</span>v <span class="token punctuation">;</span>
            ed<span class="token punctuation">.</span>cost <span class="token operator">=</span> Edge<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//(u,v,w)加入堆</span>
            H<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>ed<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>H<span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> count <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        H<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>ed<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//从堆中删除最小权的边</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Edge<span class="token punctuation">[</span>ed<span class="token punctuation">.</span>head<span class="token punctuation">]</span><span class="token punctuation">[</span>ed<span class="token punctuation">.</span>head<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//是否符合选择要求</span>
        <span class="token punctuation">{</span>
            MST<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>ed<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将该边加入最小生成树</span>
            cout <span class="token operator">&lt;&lt;</span>ed<span class="token punctuation">.</span>tail<span class="token operator">&lt;&lt;</span>ed<span class="token punctuation">.</span>head<span class="token operator">&lt;&lt;</span>ed<span class="token punctuation">.</span>cost <span class="token comment">// 输出边</span>
            u <span class="token operator">=</span> ed<span class="token punctuation">.</span>head<span class="token punctuation">;</span>
            Edge<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//u加入生成树集合中</span>
            count<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Dijkstra算法</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// n 表示结点个数</span>
    dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>G<span class="token punctuation">[</span>v0<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//初始化dist数组</span>
G<span class="token punctuation">[</span>v0<span class="token punctuation">]</span><span class="token punctuation">[</span>v0<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 加入v0，臵出发点访问标志</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//共完成n-1次</span>
<span class="token punctuation">{</span> <span class="token comment">// 找最小值</span>
    min<span class="token operator">=</span><span class="token number">32767</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//找到最小的邻接点</span>
    <span class="token punctuation">{</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">&lt;</span>min<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span> 
            pos<span class="token operator">=</span>k<span class="token punctuation">;</span> 
            min<span class="token operator">=</span>dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    G<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>G<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>min <span class="token operator">&lt;</span> dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>G<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>min<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>拓扑排序</strong></p><ol><li>输入AOV网络。令 n 为顶点个数。</li><li>在AOV网络中选一个入度为0的结点, 并输出之;</li><li>从图中删去该顶点, 同时删去所有它发出的有向边;</li><li>重复以上 ②、③步, 直到下面的情况之一出现: <ol><li>全部顶点均已输出，拓扑有序序列形成，拓 扑排序完成；</li><li>图中还有未输出的顶点, 但已没有入度为0的 结点(说明网络中必存在有向环)。</li></ol></li></ol><p>1.在count数组中找出入度为零的顶点，并分别入栈; 2.</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>栈非空<span class="token punctuation">)</span>
<span class="token punctuation">{</span> 
<span class="token comment">//出栈到v；</span>
    cout<span class="token operator">&lt;&lt;</span>NodeTable<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>
    <span class="token operator">++</span>m<span class="token punctuation">;</span>
    p<span class="token operator">=</span>NodeTable <span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>adj<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>P<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        count<span class="token punctuation">[</span>p<span class="token operator">-&gt;</span>dest<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token punctuation">[</span>p<span class="token operator">-&gt;</span>dest<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
            则结点p<span class="token operator">-&gt;</span>dest入栈
        p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.if(m&lt;n) cout&lt;&lt;“图中有回路”;</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
 
<span class="token keyword">bool</span> <span class="token function">TopSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token operator">&amp;</span>G<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>inDegree<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">/*
	*	param
	*	G：	邻接表
	*	n：	顶点数
	*	InDegree：	记录顶点的入度	
	*/</span>
	<span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>				<span class="token comment">//记录加入拓扑排序的顶点数</span>
	queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> q<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>inDegree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
			q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">//将所有入度为0的顶点入队</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">int</span> u <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">//取队首顶点u</span>
		cout <span class="token operator">&lt;&lt;</span> u <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>		
		q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">int</span> v <span class="token operator">=</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>		<span class="token comment">//u的后继节点</span>
			inDegree<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>			<span class="token comment">//v的入度减1</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>inDegree<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>		<span class="token comment">//顶点v的入度减为0则入队</span>
				q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">//清空顶点u的所有出边</span>
		num<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> n<span class="token punctuation">)</span>				<span class="token comment">//加入拓扑序列的顶点数为n，说明拓扑排序成功，否则，失败</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;请输入顶点数和边数:&quot;</span><span class="token punctuation">;</span>
	cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>
	vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">G</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;请输入第&quot;</span> <span class="token operator">&lt;&lt;</span> i<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;条边的顶点:&quot;</span><span class="token punctuation">;</span>
		cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y<span class="token punctuation">;</span>
		G<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;拓扑排序为:&quot;</span><span class="token punctuation">;</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">inDegree</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> x <span class="token operator">:</span> G<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> y <span class="token operator">:</span> x<span class="token punctuation">)</span>
			inDegree<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">bool</span> res <span class="token operator">=</span> <span class="token function">TopSort</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> n<span class="token punctuation">,</span> inDegree<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),g=[c,l,i,u,k,r,d,m,v,b,w];function y(h,f){return t(),e("div",null,g)}const T=p(o,[["render",y],["__file","Chapter8.html.vue"]]),N=JSON.parse('{"path":"/MD/School/DataStructure/Chapter8.html","title":"第8章 图论","lang":"zh-CN","frontmatter":{"title":"第8章 图论","category":"CS","tag":"DataStructure","description":"§ 第8章 图 § 8.1 图的基本概念 图定义: 图是由顶点集合(vertex)及顶点间的关系集合组成的一种数据结构 有向图和无向图 完全图 邻接顶点 子图 带权图也叫做网络 稠密图和稀疏图 m=nlogn 顶点的度 入度 出度 路径 路径长度 简单路径 回路 连通图和连通分量 强连通图与强连通分量 生成树 图的抽象数据类型 图的模版基类 § 8.2...","head":[["meta",{"property":"og:url","content":"https://www.wataminc.top/MD/School/DataStructure/Chapter8.html"}],["meta",{"property":"og:site_name","content":"Watamin C"}],["meta",{"property":"og:title","content":"第8章 图论"}],["meta",{"property":"og:description","content":"§ 第8章 图 § 8.1 图的基本概念 图定义: 图是由顶点集合(vertex)及顶点间的关系集合组成的一种数据结构 有向图和无向图 完全图 邻接顶点 子图 带权图也叫做网络 稠密图和稀疏图 m=nlogn 顶点的度 入度 出度 路径 路径长度 简单路径 回路 连通图和连通分量 强连通图与强连通分量 生成树 图的抽象数据类型 图的模版基类 § 8.2..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-18T09:24:14.000Z"}],["meta",{"property":"article:author","content":"Watamin C"}],["meta",{"property":"article:tag","content":"DataStructure"}],["meta",{"property":"article:modified_time","content":"2024-02-18T09:24:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第8章 图论\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-18T09:24:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Watamin C\\",\\"url\\":\\"www.wataminc.top\\"}]}"]]},"headers":[{"level":3,"title":"8.1 图的基本概念","slug":"_8-1-图的基本概念","link":"#_8-1-图的基本概念","children":[]},{"level":3,"title":"8.2 图的存储表示","slug":"_8-2-图的存储表示","link":"#_8-2-图的存储表示","children":[]},{"level":3,"title":"8.3 图的遍历","slug":"_8-3-图的遍历","link":"#_8-3-图的遍历","children":[]},{"level":3,"title":"8.4 最小生成树","slug":"_8-4-最小生成树","link":"#_8-4-最小生成树","children":[]}],"git":{"createdTime":1708177507000,"updatedTime":1708248254000,"contributors":[{"name":"WataminC","email":"1286982501@qq.com","commits":2}]},"readingTime":{"minutes":11.06,"words":3319},"filePathRelative":"MD/School/DataStructure/Chapter8.md","localizedDate":"2024年2月17日","excerpt":"\\n<h3><span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mi mathvariant=\\"normal\\">§</mi></mrow><annotation encoding=\\"application/x-tex\\">\\\\S</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.8889em;vertical-align:-0.1944em;\\"></span><span class=\\"mord\\">§</span></span></span></span> 8.1 图的基本概念</h3>","autoDesc":true}');export{T as comp,N as data};
